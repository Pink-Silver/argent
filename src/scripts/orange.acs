// --------------------------------------------------------------------------
//
// ORANGE: The Other OTHER White Meat
//
// --------------------------------------------------------------------------

#library "orange"
#include "zcommon.acs"

#define MAXPLAYERS 64

global bool 1:Initialized;
global int 1:ArgentHealth[];
global int 2:ArgentArmor[];
global int 3:ArgentAmmo[];
global int 4:ArgentUpgradeSelector[];

/*
 * For the pistol, give it bars to indicate its' charge status.
 */
script "Orange_PistolChargeBar" enter
{
    int ChargeAmount;
    
    if(!CheckWeapon ("ArgPistol") || !CheckInventory ("ArgPistolCharge"))
    {
        Delay (1);
        Restart;
    }
    
    ChargeAmount = CheckInventory ("ArgPistolCharge") * 64 / 45;
    
    SetHudSize (640, 480, 1);
    SetHudClipRect (0, 0, 0, 0);
    SetFont ("PCHARGE");
	HudMessage (s:"A"; HUDMSG_PLAIN | HUDMSG_ALPHA, 250, CR_UNTRANSLATED, 320.0, 240.0, 0, 0.25);
    SetHudClipRect (288, 208 + (64 - ChargeAmount), 64, ChargeAmount);
    SetFont ("PCHARGE");
	HudMessage (s:"A"; HUDMSG_PLAIN | HUDMSG_ALPHA, 251, CR_UNTRANSLATED, 320.0, 240.0, 0, 0.5);
	
	Delay (1);
    
    HudMessage (s:""; HUDMSG_PLAIN, 250, CR_UNTRANSLATED, 0, 0, 0);
    HudMessage (s:""; HUDMSG_PLAIN, 251, CR_UNTRANSLATED, 0, 0, 0);
	Restart;
}

script "Orange_WeaponCooldownBar" enter
{
	str CurrentWeapon = GetWeapon();
    bool OK = FALSE;
    
    if (!StrCmp (CurrentWeapon, "ArgShotgun") ||
        !StrCmp (CurrentWeapon, "ArgHeavyAR") ||
        !StrCmp (CurrentWeapon, "ArgChaingun") ||
        !StrCmp (CurrentWeapon, "ArgRocketLauncher") ||
        !StrCmp (CurrentWeapon, "ArgPlasmaRifle") ||
        !StrCmp (CurrentWeapon, "ArgGaussCannon"))
        OK = TRUE;
    
    if (!OK)
    {
        Delay (1);
        Restart;
    }
    
	str CooldownItem = StrParam(s:CurrentWeapon, s:"ModCooldown");
    int CooldownMax = GetMaxInventory (0, CooldownItem);
    int CooldownPercent = CheckInventory (CooldownItem) * 64 / CooldownMax;
    
    if(!CheckInventory (CooldownItem))
    {
        Delay (1);
        Restart;
    }
    
    SetHudSize (640, 480, 1);
    SetHudClipRect (0, 0, 0, 0);
    SetFont ("WCBAR");
	HudMessage (s:"A"; HUDMSG_PLAIN | HUDMSG_ALPHA, 250, CR_UNTRANSLATED, 320.0, 272.0, 0, 0.25);
    SetHudClipRect (288, 270, CooldownPercent, 4);
    SetFont ("WCBAR");
	HudMessage (s:"A"; HUDMSG_PLAIN | HUDMSG_ALPHA, 251, CR_UNTRANSLATED, 320.0, 272.0, 0, 0.5);
	
	Delay (1);
    
    HudMessage (s:""; HUDMSG_PLAIN, 250, CR_UNTRANSLATED, 0, 0, 0);
    HudMessage (s:""; HUDMSG_PLAIN, 251, CR_UNTRANSLATED, 0, 0, 0);
	Restart;
}

script "Orange_HUD" enter
{
    SetHudSize (640, 480, 1);
    int Player = PlayerNumber ();
    
    while (TRUE)
    {
        /* BFG Cells & Chainsaw Fuel */
        
        if (CheckInventory ("ArgChainsaw"))
        {
            SetFont ("RLITE");
            for (int ammo = 1; ammo <= 7; ammo++)
            {
                int Alpha = 0.25;
                if (CheckInventory ("ChainsawFuel") >= ammo) Alpha = 1.0;
                if (ammo > GetAmmoCapacity ("ChainsawFuel")) Alpha = 0.0;
                HudMessage (s:"A"; HUDMSG_PLAIN | HUDMSG_ALPHA, 200 + ammo, CR_UNTRANSLATED, 28.1 + (22.0 * (ammo - 1)), 401.0, 0.03, Alpha);
            }
        }
        
        if (CheckInventory ("ArgBFG9000"))
        {
            SetFont ("GLITE");
            for (int ammo = 1; ammo <= 7; ammo++)
            {
                int Alpha = 0.25;
                if (CheckInventory ("BFGCell") >= ammo) Alpha = 1.0;
                if (ammo > GetAmmoCapacity ("BFGCell")) Alpha = 0.0;
                HudMessage (s:"A"; HUDMSG_PLAIN | HUDMSG_ALPHA, 207 + ammo, CR_UNTRANSLATED, 28.1 + (22.0 * (ammo - 1)), 411.0, 0.03, Alpha);
            }
        }
        
        /* Argent Cell Stats */
        
        SetFont ("REDBASE");
        HudMessage (s:"A"; HUDMSG_PLAIN, 288, CR_UNTRANSLATED, 28.1, 360.0, 0);
        
        for (int bar = 1; bar <= 3; bar++)
        {
            str barlabel = "Health";
            if (bar == 2) barlabel = "Armor";
            if (bar == 3) barlabel = "Ammo";
            int upgrades = ArgentHealth[Player];
            if (bar == 2) upgrades = ArgentArmor[Player];
            if (bar == 3) upgrades = ArgentAmmo[Player];
            
            for (int i = 1; i <= 5; i++)
            {
                int Alpha = 1.0;
                SetFont ("SREDBAR1");
                if (i > upgrades) Alpha = 0.25;
                
                HudMessage (s:"A"; HUDMSG_PLAIN | HUDMSG_ALPHA, 252 + (6 * (bar - 1)) + i, CR_UNTRANSLATED, 32.1 + (8.0 * (i - 1)), 340.0 + (20.0 * (bar - 1)), 0, Alpha);
            }
            
            int textcolor = CR_ORANGE;
            if (ArgentUpgradeSelector[PlayerNumber()] == bar)
                textcolor = CR_GOLD;
            
            SetFont ("ArgFont");
            HudMessage (s:barlabel; HUDMSG_PLAIN | HUDMSG_ALPHA, 252 + (6 * (bar - 1)), textcolor, 76.1, 340.0 + (20.0 * (bar - 1)), 0, 0.5 + FixedMul(Sin(FixedDiv(Timer() * 1.0, 70.0)), 0.5));
            HudMessage (s:barlabel; HUDMSG_PLAIN, 270 + (6 * (bar - 1)), CR_ORANGE, 76.1, 340.0 + (20.0 * (bar - 1)), 0);
        }
        
        Delay (1);
    }
}

script "Orange_Initialize" open
{
    CreateTranslation(1, 0:255=%[0.0,0.0,1.0]:[0.0,0.0,0.0]);
    CreateTranslation(2, 0:255=%[1.0,0.0,0.0]:[0.0,0.0,0.0]);
    
    if (Initialized)
        terminate;
    
    for (int i = 0; i < MAXPLAYERS; i++)
    {
        ArgentHealth[i] = 1;
        ArgentArmor[i] = 1;
        ArgentAmmo[i] = 1;
        ArgentUpgradeSelector[i] = Random(1, 3);
    }
    
    Delay (1);
    Initialized = true;
}

script "Orange_ArgentSelect" (void)
{
    int Player = PlayerNumber ();
    if (ArgentHealth[Player] >= 5 && ArgentArmor[Player] >= 5 && ArgentAmmo[Player] >= 5)
    {
        ArgentUpgradeSelector[Player] = 0;
        Terminate;
    }
    
    ArgentUpgradeSelector[Player]++;
    
    bool okay = false;
    while (!okay)
    {
        if (ArgentUpgradeSelector[Player] == 1 && ArgentHealth[Player] >= 5)
            ArgentUpgradeSelector[Player]++;
        if (ArgentUpgradeSelector[Player] == 2 && ArgentArmor[Player] >= 5)
            ArgentUpgradeSelector[Player]++;
        if (ArgentUpgradeSelector[Player] == 3 && ArgentAmmo[Player] >= 5)
            ArgentUpgradeSelector[Player]++;
        
        if (ArgentUpgradeSelector[Player] > 3)
            ArgentUpgradeSelector[Player] = 1;
        
        if ((ArgentUpgradeSelector[Player] == 1 && ArgentHealth[Player] < 5) ||
            (ArgentUpgradeSelector[Player] == 2 && ArgentArmor[Player] < 5) ||
            (ArgentUpgradeSelector[Player] == 3 && ArgentAmmo[Player] < 5))
            okay = true;
    }
    
    ActivatorSound ("items/automap", 127);
}

script "Orange_ArgentCell" (void)
{
    SetHudSize (640, 480, 1);
    int Player = PlayerNumber ();
    
    if (ArgentHealth[Player] >= 5 && ArgentArmor[Player] >= 5 && ArgentAmmo[Player] >= 5)
    {
        GiveInventory ("SphereMega", 1);
        SetPlayerProperty (FALSE, FALSE, PROP_TOTALLYFROZEN);
        ActivatorSound ("items/powerup", 127);
        
        FadeTo (255, 128, 0, 0.5, 0);
        FadeTo (255, 128, 0, 0, 1.0);
        terminate;
    }
    
    switch (ArgentUpgradeSelector[Player])
    {
        case 1:
            ArgentHealth[Player]++;
            break;
        case 2:
            ArgentArmor[Player]++;
            break;
        case 3:
            ArgentAmmo[Player]++;
            break;
    }
    ActivatorSound ("items/powerup", 127);
    ACS_NamedExecuteWithResult ("Orange_SetArgentMaxes");
    
    ArgentUpgradeSelector[Player] = Random(1, 3);
    ACS_NamedExecuteWithResult ("Orange_ArgentSelect");
    
    FadeTo (128, 32, 0, 0, 1.0);
}

/*
 * Sets the maximum for health/armor/ammo on map start. It also gets re-run
 * when an Argent Cell is applied to reapply the new maxes.
 */
script "Orange_SetArgentMaxes" enter
{
    int Player = PlayerNumber ();
    
    while (!Initialized) Delay (1);
    
    /* Health Capacity */
    SetActorProperty (0, APROP_SpawnHealth, 75 + (25 * ArgentHealth[Player]));
    
    /* Ammo Capacity */
    SetAmmoCapacity ("Clip", 60 + (30 * ArgentAmmo[Player]));
    SetAmmoCapacity ("Shell", 10 + (10 * ArgentAmmo[Player]));
    SetAmmoCapacity ("RocketAmmo", 10 + (5 * ArgentAmmo[Player]));
    SetAmmoCapacity ("Cell", 100 + (50 * ArgentAmmo[Player]));
    
    SetAmmoCapacity ("BFGCell", 2 + ArgentAmmo[Player]);
    SetAmmoCapacity ("ChainsawFuel", 2 + ArgentAmmo[Player]);
}

script "Orange_GiveArmor" (int amount)
{
    int Player = PlayerNumber ();
    int ArmorMax = 25 + (25 * ArgentArmor[Player]);
    
    if (CheckInventory ("BasicArmor") >= ArmorMax)
    {
        SetResultValue (FALSE);
        Terminate;
    }
    
    if (amount + CheckInventory ("BasicArmor") > ArmorMax)
        amount = ArmorMax - CheckInventory ("BasicArmor");
    
    GiveInventory ("ArgArmor", amount);
    
    SetResultValue (TRUE);
}

script "Orange_MasterIsMonster" (void)
{
    SetActivator (0, AAPTR_MASTER);
    
    if (ClassifyActor(0) & ACTOR_MONSTER)
    {
        SetResultValue (TRUE);
        Terminate;
    }
    
    SetResultValue (FALSE);
}

script "Orange_TagMonster" (void)
{
    if (ACS_NamedExecuteWithResult ("Orange_MasterIsMonster"))
        ACS_NamedExecuteWithResult ("Orange_TaggedMonster");
}

script "Orange_DropAmmoIfTagged" (void)
{
    str AmmoTypes[5] = {
        "ArgClipDropped",
        "ArgShellDropped",
        "ArgRocketAmmoDropped",
        "ArgCellDropped",
        "ArgBFGCellDropped"
    };
    
    int Height = GetActorProperty (0, APROP_Height);
    int TID = UniqueTID ();
    
    if (CheckInventory ("ArgPistolTag"))
    {
        Spawn (AmmoTypes[Random (0, 4)], GetActorX (0), GetActorY (0), GetActorZ (0) + (Height / 2), TID);
        SetActorVelocity (TID, Random (-6.0, 6.0), Random (-6.0, 6.0), Random (0.0, 6.0), FALSE, FALSE);
    }
}

script "Orange_AmmoShower" (void)
{
    SetActivator (0, AAPTR_MASTER);
    Delay(1);
    
    if (!(ClassifyActor(0) & ACTOR_DEAD)) Terminate;
    
    str AmmoTypes[4] = {
        "ArgClipDropped",
        "ArgShellDropped",
        "ArgRocketAmmoDropped",
        "ArgCellDropped"
    };
    
    int Height = GetActorProperty (0, APROP_Height);
    
    for (int i = 20; i > 0; i--)
    {
        int TID = UniqueTID ();
        Spawn (AmmoTypes[i % 4], GetActorX (0), GetActorY (0), GetActorZ (0) + (Height / 2), TID);
        SetActorVelocity (TID, Random (-3.0, 3.0), Random (-3.0, 3.0), Random (0.0, 3.0), FALSE, FALSE);
    }
    if (ACS_NamedExecuteWithResult ("Orange_CheckForWeapon", 1) && Random (0, 256) < 32)
    {
        int TID = UniqueTID ();
        Spawn ("ArgBFGCellDropped", GetActorX (0), GetActorY (0), GetActorZ (0) + (Height / 2), TID);
        SetActorVelocity (TID, Random (-3.0, 3.0), Random (-3.0, 3.0), Random (0.0, 3.0), FALSE, FALSE);
    }
}

script "Orange_TaggedMonster" (void)
{
    SetActivator (0, AAPTR_MASTER);
    
    if (GetActorProperty (0, APROP_Health) > ((GetActorProperty (0, APROP_SpawnHealth) * 6) / 10) && !CheckInventory ("ArgPistolTag"))
        Terminate;
    
    if (!Random (0, 15) && !CheckFlag (0, "ALWAYSFAST"))
    {
        // BAD TOUCH!
        ActivatorSound ("items/powerup", 127);
        ActivatorSound ("items/powerups/berserk", 127);
        GiveInventory ("ArgMakeFaster", 1);
    }
    
    if (CheckInventory ("ArgPistolTag"))
    {
        GiveInventory ("ArgPistolTag", 35);
        Terminate;
    }
    
    GiveInventory ("PowerArgExecution", 1);
    GiveInventory ("ArgMakeFullbright", 1);
    GiveInventory ("ArgPistolTag", 175);
    if (CheckFlag (1, "BOSS")) TakeInventory ("ArgPistolTag", 70);
    
    while (CheckInventory ("ArgPistolTag"))
    {
        fixed Radius = GetActorProperty (0, APROP_Radius);
        fixed Height = GetActorProperty (0, APROP_Height);
        fixed ParticleSpeed = FixedDiv (GetActorProperty (0, APROP_Radius), 32.0);
        fixed X = GetActorX (0);
        fixed Y = GetActorY (0);
        fixed Z = GetActorZ (0);
        int ParticleColor = 0x8080FF;

        if (!(ClassifyActor (0) & ACTOR_ALIVE))
        {
            if (!ACS_NamedExecuteWithResult ("Orange_CheckForPistolKill") && !ACS_NamedExecuteWithResult ("Orange_CheckForInfighting"))
            {
                int HealthDrops = Random (1, 3);
                int ArmorDrops = Random (1, 3);
                if (ACS_NamedExecuteWithResult ("Orange_CheckForLudicrousHealth"))
                    HealthDrops *= 3;
                
                SetActorState (0, "XDeath");
                
                // DROOOOOPSSSS
                while (HealthDrops > 0)
                {
                    DropItem (0, "ArgHealthBonusDropped", -1, 256);
                    HealthDrops--;
                }
                while (ArmorDrops > 0)
                {
                    DropItem (0, "ArgArmorBonusDropped", -1, 256);
                    ArmorDrops--;
                }
                
                if (GetCVar ("arg_tagweapons"))
                {
                    str drop = "";
                    if (CheckActorClass (0, "ArgZombieman") || CheckActorClass (0, "ArgNazi")) drop = "ArgClip";
                    if (CheckActorClass (0, "ArgShotgunGuy")) drop = "ArgShotgun";
                    if (CheckActorClass (0, "ArgChaingunGuy")) drop = "ArgHeavyAR";
                    DropItem (0, drop, -1, 256);
                }

                DropItem (0, "ArgArgentSelectorDropped", 10, 85);
                
                // Occasionally drop a few random ammo pickups even if we haven't used the chainsaw
                DropItem (0, "ArgClipDropped", 10, 64);
                DropItem (0, "ArgShellDropped", 4, 64);
                DropItem (0, "ArgRocketAmmoDropped", 1, 64);
                DropItem (0, "ArgCellDropped", 20, 64);
                    
                if (ACS_NamedExecuteWithResult ("Orange_CheckForWeapon", 0)) DropItem (0, "ArgChainsawFuelDropped", 1, 16);
                if (ACS_NamedExecuteWithResult ("Orange_CheckForWeapon", 1)) DropItem (0, "ArgBFGCellDropped", 1, 16);
            }
            
            Thing_SetTranslation (0, 0);
            TakeInventory ("PowerArgExecution", 1);
            GiveInventory ("ArgMakeUnFullbright", 1);
            TakeInventory ("ArgPistolTag", 350);
            GiveInventory ("ArgMakeSlower", 1);
            Terminate;
        }
        
        if (!CheckFlag (0, "ALWAYSFAST"))
        {
            Thing_SetTranslation (0, 1);
        }
        else
        {
            Thing_SetTranslation (0, 2);
            ParticleColor = 0xFF8080;
        }
        
        for (int i = 0; i < 360; i += 11)
        {
            SpawnParticle (ParticleColor, TRUE, 20, 3, X + FixedMul (Cos (FixedDiv (i * 1.0, 360.0)), Radius), Y + FixedMul (Sin (FixedDiv (i * 1.0, 360.0)), Radius), Z + (Height / 2) + FixedMul (Sin (FixedDiv (Timer() * 1.0, 35.0)) / 2, Height), FixedMul (Cos (FixedDiv (i * 1.0, 360.0)), ParticleSpeed), FixedMul (Sin (FixedDiv (i * 1.0, 360.0)), ParticleSpeed), 0, 0, 0, 0, 255, 13);        
        }
        
        Delay (1);
        TakeInventory ("ArgPistolTag", 1);
    }
    
    Thing_SetTranslation (0, 0);
    TakeInventory ("PowerArgExecution", 1);
    GiveInventory ("ArgMakeUnFullbright", 1);
    GiveInventory ("ArgMakeSlower", 1);
}

script "Orange_CheckForInfighting" (void)
{
    SetActivator (0, AAPTR_TARGET);
    
    if (PlayerNumber() == -1)
    {
        SetResultValue (TRUE);
        Terminate;
    }
    
    SetResultValue (FALSE);
}

script "Orange_CheckForPistolKill" (void)
{
    SetActivator (0, AAPTR_TARGET);
    
    if (CheckWeapon ("ArgPistol"))
    {
        SetResultValue (TRUE);
        Terminate;
    }
    
    SetResultValue (FALSE);
}

script "Orange_CheckForWeapon" (int weapontype)
{
    SetActivator (0, AAPTR_TARGET);
    
    str weapon[2] = {
        "ArgChainsaw",
        "ArgBFG9000"
    };

    if (CheckInventory (weapon[weapontype]))
    {
        SetResultValue (TRUE);
        Terminate;
    }
    
    SetResultValue (FALSE);
}

script "Orange_CheckForLudicrousHealth" (void)
{
    SetActivator (0, AAPTR_TARGET);
    
    if (GetActorProperty (0, APROP_Health) <= 25)
    {
        SetResultValue (TRUE);
        Terminate;
    }
    
    SetResultValue (FALSE);
}

script "Orange_DropWeaponsAppropriately" (void)
{
    str drop = "";
    if (CheckActorClass (0, "ArgZombieman") || CheckActorClass (0, "ArgNazi")) drop = "ArgClip";
    if (CheckActorClass (0, "ArgShotgunGuy")) drop = "ArgShotgun";
    if (CheckActorClass (0, "ArgChaingunGuy")) drop = "ArgHeavyAR";
    
    if (!GetCVar ("arg_tagweapons") || !Random(0, 7))
        DropItem (0, drop, -1, 256);
}

script "Orange_TemporaryItem" (void)
{
    int Radius = GetActorProperty (0, APROP_Radius);
    int Height = GetActorProperty (0, APROP_Height);
    
    int Counter = 35 * 7;
    while (Counter)
    {
        if (ClassifyActor (0) == ACTOR_WORLD)
            Terminate;
        
        if (!Random (0, 15)) SpawnParticle (0xFFFF00, TRUE, 20, 4, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
        if (!Random (0, 15)) SpawnParticle (0xFFFF40, TRUE, 20, 3, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
        if (!Random (0, 15)) SpawnParticle (0xFFFF80, TRUE, 20, 3, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
        if (!Random (0, 15)) SpawnParticle (0xFFFFC0, TRUE, 20, 2, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
        if (!Random (0, 15)) SpawnParticle (0xFFFFFF, TRUE, 20, 2, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
        
        Delay (1);
        Counter--;
    }
    
    SetActorProperty (0, APROP_RenderStyle, STYLE_Add);
    SetActorProperty (0, APROP_Alpha, 0.5);
    
    Counter = 35 * 3;
    while (Counter)
    {
        if (ClassifyActor (0) == ACTOR_WORLD)
            Terminate;
        
        if (!Random (0, 15)) SpawnParticle (0xFFFF00, TRUE, 20, 4, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
        if (!Random (0, 15)) SpawnParticle (0xFFFF40, TRUE, 20, 3, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
        if (!Random (0, 15)) SpawnParticle (0xFFFF80, TRUE, 20, 3, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
        if (!Random (0, 15)) SpawnParticle (0xFFFFC0, TRUE, 20, 2, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
        if (!Random (0, 15)) SpawnParticle (0xFFFFFF, TRUE, 20, 2, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
        
        Delay (1);
        Counter--;
    }
    
    Thing_Remove (0);
}
