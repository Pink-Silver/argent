// --------------------------------------------------------------------------
//
// ARGENT: ACS Lib of Spectacular Scriptage
//
// Exceptionally-important note: This now requires GDCC to build.
// It's pretty much better than acc.exe in every way, so get it! :P
//
// --------------------------------------------------------------------------

#library "argent"
#include "zcommon.acs"

#define DEF_STUN_SECONDS 5
#define DEF_DUMMY_TID    -1
#define DEF_TID_START    1000

/*
 * Exceptionally-useful player struct thingamajig.
 */
struct ArgPlayer
{
	int rocketTid;
}
ArgPlayer players[64]; // zandro max to the max!

/*
 * Init script. Gotta set those defaults to something sane.
 */ 
script "ArgentInit" enter {
	ArgPlayer playerStruct = {
		DEF_DUMMY_TID // rocketTid
	};
	players[PlayerNumber()] = playerStruct;
}

/*
 * Monitor script. Handles stuff that has to be triggered in a script loop.
 * Only updates once a second since none of this requires real-time stuffs.
 */
script "ArgentMonitor" enter {

	// statbar switching
	if(GetCVAR("arg_classicHUD")) {
		GiveInventory("ArgClassicHudToken", 1);
	} else {
		TakeInventory("ArgClassicHudToken", 1);
	}
	
	// bfg ammo counter thingy
	if(GetCVAR("arg_bfgammotype")) {
		GiveInventory("ArgBFGAmmoTypeToken", 1);
	} else {
		TakeInventory("ArgBFGAmmoTypeToken", 1);
	}
	
	// reeeeplaaay jeeenkiiiins
	Delay(35);
	Restart;
}

/*
 * Swaps the player's active weapon mod. This script just swaps the tokens;
 * the base ArgWeaponMod definition handles the state jumps and the initiation
 * of the swap animation.
 */
script "SwapMod" (void) {

	// Get the classes of the weapon tokens to figure out which
	// mod is selected (and whether or not each mod has actually
	// been picked up).
	str weapon = GetWeapon();
	str modSelectedToken = StrParam(s:weapon, s:"ModSelected");
	str mod1EnabledToken = StrParam(s:weapon, s:"Mod1Enabled");
	str mod2EnabledToken = StrParam(s:weapon, s:"Mod2Enabled");
	
	// determine which mod is actually selected
	int modSelected = CheckInventory(modSelectedToken);
	int mod1Enabled = CheckInventory(mod1EnabledToken);
	int mod2Enabled = CheckInventory(mod2EnabledToken);
	
	int modToSelect = 0;
	// swap to weapon 2 if 1 is selected; else switch to 1.
	// [XA] the lack of a ternary conditional is quite confounding.
	//      I need to switch to DH-ACC already. :P
	if(modSelected == 0) {
		if(mod1Enabled) {
			modToSelect = 1;
		} else if(mod2Enabled) {
			modToSelect = 2;
		}
	} else if(modSelected == 1) {
		if(mod2Enabled) {
			modToSelect = 2;
		}
	} else {
		if(mod1Enabled) {
			modToSelect = 1;
		}
	}
	
	// Do the mod swap, assuming we have a valid one to swap to.
	if(modToSelect > 0) {
		TakeInventory(modSelectedToken, 2);
		GiveInventory(modSelectedToken, modToSelect);
		SetResultValue(true);
	}
	else {
		SetResultValue(false);
	}
}

/*
 * Checks if the specified mod is currently selected. Used for state jumps.
 */
script "ModSelected" (int mod) {
	SetResultValue(CheckInventory(StrParam(s:GetWeapon(), s:"ModSelected")) == mod);
}

/*
 * Nefarious mod cheat script. For testing, surely.
 */
script "GimmeMods" (void) {
	str weapon = GetWeapon();
	str mod1EnabledToken = StrParam(s:weapon, s:"Mod1Enabled");
	str mod2EnabledToken = StrParam(s:weapon, s:"Mod2Enabled");
	GiveInventory(mod1EnabledToken, 1);
	GiveInventory(mod2EnabledToken, 1);
}

/*
 * Start mod cooldown phase. This is done in a script so there
 * aren't a zillion ACS_NamedExecutes done in a 1-tic loop constantly.
 */
script "StartModCooldown" (void) {
	str weapon = GetWeapon();
	str modCooldownToken = StrParam(s:weapon, s:"ModCooldown");
	while(CheckInventory(modCooldownToken) > 0) {
		TakeInventory(modCooldownToken, 1);
		delay(1);
	}
}

/*
 * Checks if mod cooldown is complete.
 */
script "CheckModCooldown" (void) {
	str weapon = GetWeapon();
	str modCooldownToken = StrParam(s:weapon, s:"ModCooldown");
	SetResultValue(CheckInventory(modCooldownToken) == 0);
}

/*
 * Clears a mod's cooldown entirely.
 */
script "ClearModCooldown" (void) {
	str weapon = GetWeapon();
	str modCooldownToken = StrParam(s:weapon, s:"ModCooldown");
	TakeInventory(modCooldownToken, 999);
}

/*
 * Removes all cooldowns on map start.
 */
script "ClearCooldownsOnStart" enter {
	// [XA] bit stiff in the code here, but it works.
	TakeInventory("ArgShotgunModCooldown"       , 999);
	TakeInventory("ArgHeavyARModCooldown"       , 999);
	TakeInventory("ArgChaingunModCooldown"      , 999);
	TakeInventory("ArgRocketLauncherModCooldown", 999);
	TakeInventory("ArgPlasmaRifleModCooldown"   , 999);
	TakeInventory("ArgGaussCannonModCooldown"   , 999);
}

/*
 * Simplified SynthFire: Primary
 */
script "SynthFire" (void)
{
	SetResultValue(GetPlayerInput(-1, INPUT_BUTTONS) & BT_ATTACK);
}

/*
 * Simplified SynthFire: Alternate
 */
script "SynthAltFire" (void)
{
	SetResultValue(GetPlayerInput(-1, INPUT_BUTTONS) & BT_ALTATTACK);
}

/*
 * GetTracer functions for sticky missiles (cheers, love!)
 */
script "GetTracerX" (void) {
	int projX = GetActorX(0);
	SetActivator(0, AAPTR_TRACER);
	int targX = GetActorX(0);
	SetResultValue(((projX - targX) * 3 / 4) >> 16);
}
script "GetTracerY" (void) {
	int projY = GetActorY(0);
	SetActivator(0, AAPTR_TRACER);
	int targY = GetActorY(0);
	SetResultValue(((projY - targY) * 3 / 4) >> 16);
}
script "GetTracerZ" (void) {
	int projZ = GetActorZ(0);
	SetActivator(0, AAPTR_TRACER);
	int targZ = GetActorZ(0);
	SetResultValue(((projZ - targZ) * 3 / 4) >> 16);
}

/*
 * Extremely-useful utility function for saving the player's number in a uservar.
 */
script "GetPlayerNumber" (void) {
	SetActivatorToTarget(0);
	SetResultValue(PlayerNumber());
}

/*
 * RAWGGIT LAWNCHAIR scripts
 */
script "Mod1RocketFire" (int playerNum) {
	// remote detonator. Need to snag the rockets' TID so things may happen.
	int rocketTid = players[playerNum].rocketTid;
	
	// if the TID is the placeholder value (DEF_DUMMY_TID), assign a new one.
	// this will of course break if played with CIF3. Assuming literally anything
	// else in the mod is compatible with it at all... you crazy git. ;P
	if(rocketTid == DEF_DUMMY_TID) {
		rocketTid = UniqueTID(DEF_TID_START);
		players[playerNum].rocketTid = rocketTid;
	}
	
	// finally, don't forget to assign the TID to the rocket. :P
	Thing_ChangeTID(0, rocketTid);
}
script "Mod1RocketDetonate" (void) {
	// snag the TID, as before. Note that we actually user playerNum() here
	// since this script is called from the weapon rather than the projectile.
	int playerNum = PlayerNumber();
	int rocketTid = players[playerNum].rocketTid;
	
	// Nuke the sucker.
	SetActorState(rocketTid, "Detonate");
}
script "Mod1RocketExplode" (int playerNum) {
	// la la la TID la la
	int rocketTid = players[playerNum].rocketTid;
	
	// Wait a tic then check to see if there's anything else that has the TID.
	// Otherwise, clean it up so we can get a fresh one later.
	Delay(1);
	if(ThingCount(T_NONE, rocketTid) == 0) {
		players[playerNum].rocketTid = DEF_DUMMY_TID;
	}
}

/*
 * Plazma Stunz0rs
 */
script "NeuralStunner" (void) {
	// [TODO] add stun duration uservars and set 'em on a few choice monsters (like bosses)
	int duration = DEF_STUN_SECONDS * 35;
	
	// loop for the duration and repeatedly set the pain state.
	// A custom "Pain.Stun" state is used; if this isn't defined,
	// the it falls back to the regular ol' Pain state.
	for(int i = 0; i < duration; i++) {

		// Don't SetActorState if the monster's dead,
		// or else Bad Things(tm) will happen.
		if(GetActorProperty(0, APROP_HEALTH) >= 1) {
			SetActorState(0, "Pain.Stun");
		} else {
			break;
		}
		
		// [TODO] stunny zap effects
		Delay(1);
	}
}

/*
 * Silly Test Stuff
 */
script "FontTest" (void) {
	SetFont("ARGFONT");
	print(s:"The quick brown katefox jumps over the lazy xaserdog.\n");
}
