// --------------------------------------------------------------------------
//
// ARGENT: Pistol
//
// --------------------------------------------------------------------------

class ArgPistol : ArgWeapon replaces Pistol
{	
	int charge;
	bool altSound;

	const PISTOL_MAX_CHARGE = 45;
	const PISTOL_SND_CHARGE = 23;

	Default
	{
		Weapon.SelectionOrder 9;
		Inventory.Icon "graphics/hud/weapon-pistol.png";
		Inventory.PickupMessage "$ARG_GOT_PISTOL";
		Tag "$ARG_TAG_PISTOL";
		Obituary "$ARG_OB_PISTOL";
		DamageType "ArgPistol";
	
		+WEAPON.NOALERT
		+WEAPON.NOAUTOFIRE
		+WEAPON.WIMPY_WEAPON
	}
	States
	{
	Spawn:
		PISP A -1;
		Stop;
	Ready:
		PISG A 1 A_WeaponReady;
		Loop;
	Select:
		PISG A 0 {
			invoker.charge = 0;
		}
		Goto SelectLoop;
	Deselect:
		PISG A 0 {
			A_StopSound(CHAN_WEAPON);
			invoker.charge = 0;
		}
		Goto DeselectLoop;
	Fire:
		PISF A 1 Bright {
			A_GunFlash();
			A_AlertMonsters();

			A_PlaySound("weapons/pistol/fire", invoker.altSound ? CHAN_6 : CHAN_5);
			invoker.altSound = !invoker.altSound;

			A_FireBullets(1.5, 1, 1, 5, "ArgPistolPuff");
			A_WeaponReady(WRF_NOFIRE);
		}
		PISF B 1   A_WeaponReady(WRF_NOFIRE | WRF_NOSWITCH);
		PISF C 1 { A_WeaponReady(WRF_NOFIRE | WRF_NOSWITCH); A_WeaponOffset(1.0 + frandom(-0.25, 0.25), 33.0 + frandom(-0.25, 0.25)); }
		PISF C 1 { A_WeaponReady(WRF_NOFIRE | WRF_NOSWITCH); A_WeaponOffset(2.0 + frandom( 0.00, 1.00), 37.0 + frandom( 0.00, 1.00)); }
		PISF B 1 { A_WeaponReady(WRF_NOFIRE | WRF_NOSWITCH); A_WeaponOffset(3.0 + frandom( 0.00, 1.00), 40.0 + frandom( 0.00, 2.00)); }
		PISF B 1 { A_WeaponReady(WRF_NOFIRE | WRF_NOSWITCH); A_WeaponOffset(1.0 + frandom(-0.25, 0.25), 38.0 + frandom(-0.25, 0.25)); }
		PISG A 1   A_WeaponReady(WRF_NOFIRE | WRF_NOSWITCH);
		PISG AAAAA 1 A_WeaponReady;
		PISG A 0 A_Refire;
		Goto Ready;
	AltFire:
		PISA D 1 { A_WeaponOffset(- 2.0, 32.0); A_PlaySound("weapons/pistol/charge", CHAN_WEAPON); }
		PISA D 1   A_WeaponOffset(- 6.0, 32.0);
		PISA C 1   A_WeaponOffset(-12.0, 31.5);
		PISA C 1   A_WeaponOffset(-16.0, 31.0);
		PISA B 1   A_WeaponOffset(-18.0, 30.5);
	AltHold:
		PISA A 1 {
			if(invoker.charge < PISTOL_MAX_CHARGE) {
				invoker.charge++;
				A_WeaponOffset(-20.0 + frandom(invoker.charge * -0.025, invoker.charge * 0.025)
				,               30.0 + frandom(invoker.charge * -0.025, invoker.charge * 0.025)
				);
				return ResolveState(null);
			} else {
				A_WeaponOffset(-20.0 + frandom(-0.25, 0.25), 30.0 + frandom(-0.25, 0.25));
				return ResolveState("AltHoldChargeSound");
			}
		}
		PISA A 0 Arg_A_SynthFire("AltShoopDaWoop");
		PISA A 0 A_Refire();
		Goto AltDown;
	AltHoldChargeSound:
		PISA A 0 {
			if(invoker.charge == (PISTOL_MAX_CHARGE + PISTOL_SND_CHARGE)) {
				A_PlaySound("weapons/pistol/hum", CHAN_WEAPON, 1.0, true);
			}
			invoker.charge++;
		}
	AltHoldCharged:
		PISA A 1 Arg_A_SynthFire("AltShoopDaWoop");
		PISA A 0 A_Refire();
		Goto AltDown;
	AltShoopDaWoop:
		PISB A 1 Bright {
			A_GunFlash();
			A_AlertMonsters();
			A_FireBullets(1.5, 1, 1, 2*invoker.charge, "ArgPistolPuff", FBF_NORANDOM);
			A_PlaySound("weapons/pistol/altfire", CHAN_7);
			A_StopSound(CHAN_WEAPON);
		}
		PISB B 1 A_WeaponOffset(-19.0, 31.0);
		PISB B 1 A_WeaponOffset(-17.0, 35.0);
		PISB C 1 A_WeaponOffset(-13.0, 39.0);
		PISB C 1 A_WeaponOffset(- 9.0, 42.0);
		PISB C 1 A_WeaponOffset(- 4.0, 48.0);
		PISB C 1 A_WeaponOffset(- 2.0, 50.0);
		PISB B 1 A_WeaponOffset(- 3.0, 49.0);
		PISB B 1 A_WeaponOffset(- 7.0, 46.0);
		PISB B 1 A_WeaponOffset(-12.0, 42.0);
		PISA A 1 A_WeaponOffset(-16.0, 39.0);
		PISA A 1 A_WeaponOffset(-18.0, 35.0);
		PISA A 1 A_WeaponOffset(-19.0, 33.0);
		PISA A 1 A_WeaponOffset(-19.0, 31.0);
		PISA A 4 A_WeaponOffset(-20.0, 30.0);
	AltDown:
		PISA B 1 {
			A_StopSound(CHAN_WEAPON);
			A_ClearRefire();
			A_WeaponOffset(-18.0, 30.5);
			invoker.charge = 0;
		}
		PISA C 1 A_WeaponOffset(-16.0, 31.0);
		PISA C 1 A_WeaponOffset(-12.0, 31.5);
		PISA D 1 A_WeaponOffset(- 6.0, 32.0);
		PISA D 1 A_WeaponOffset(- 2.0, 32.0);
		PISG A 0 A_Refire("AltFire");
		Goto Ready;
	Flash:
		TNT1 A 2 Bright A_Light1();
		Goto LightDone;
	}
}

class ArgPistolPuff : ArgBulletPuff
{
	Default
	{
		Translation "80:111=[143,143,255]:[0,0,83]", "160:167=[143,143,255]:[0,0,83]", "208:223=[143,143,255]:[0,0,83]", "224:231=[143,143,255]:[199,199,255]";
	}
	States
	{
	Spawn:
		XPUF Q 0 BRIGHT;
		XPUF Q 0 A_SpawnItemEx("ArgPuffSmoke",0,0,4.0+0.1*random(-10,10),0,0,0,0,SXF_CLIENTSIDE,0);
		XPUF Q 0 A_Jump(128,"PuffMirrored");
	PuffNormal:
		XPUF QRSTU 1 BRIGHT;
		XPUF FGH 1 BRIGHT;
		Stop;
	PuffMirrored:
		XPUF VWXYZ 1 BRIGHT;
		XPUF NOP 1 BRIGHT;
		Stop;
	}
}
