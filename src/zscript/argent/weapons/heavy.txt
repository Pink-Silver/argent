// --------------------------------------------------------------------------
//
// ARGENT: Heavy Assault Rifle
//
// --------------------------------------------------------------------------

class ArgHeavyARModSelected : ArgModToken {}
class ArgHeavyARMod1Enabled : ArgToken    {}
class ArgHeavyARMod2Enabled : ArgToken    {}
class ArgHeavyARModCooldown : ArgToken    { Default { Inventory.MaxAmount 90; } }
class ArgHeavyARShootyToken : ArgToken    {} // extra token for sound control

class ArgHeavyAR : ArgModWeapon replaces Chaingun
{
	const HEAVY_MOD1_AMMOUSE = 3;
	const HEAVY_MOD2_AMMOUSE = 2;
	const HEAVY_MOD_COOLDOWN = 90;
	const HEAVY_CROSSHAIR_ANIM1 = 41;
	const HEAVY_CROSSHAIR_ANIM2 = 42;
	const HEAVY_CROSSHAIR_ANIM3 = 43;
	const HEAVY_CROSSHAIR_ANIM4 = 44;
	const HEAVY_CROSSHAIR_IDLE  = 45;

	Default {
		Weapon.SelectionOrder 5;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 20;
		Weapon.AmmoType "Clip";
		Inventory.Icon "graphics/hud/weapon-heavy.png";
		Inventory.PickupMessage "$ARG_GOT_HEAVY";
		Tag "$ARG_TAG_HEAVY";
		Obituary "$ARG_OB_HEAVY";
		DamageType "ArgHeavyAR";
	}
	States
	{
	Spawn:
		HARP A -1;
		Stop;
	Ready:
		HARG A 0;
		Goto Super::Ready;
		
	/* Unmodded + Primary */
	
	Mod0Select:
		HARG A 0;
		Goto SelectLoop;
	Mod0Ready:
		HARG A 0;
		Goto ReadyLoop;
	Mod0Fire:
		"####" B 1 Bright {
			A_GunFlash();
			A_AlertMonsters();
			A_FireBullets(2.0, 1.0, -1, 7, "ArgBulletPuff");
			if(CountInv("ArgHeavyARShootyToken") == 0) {
				A_GiveInventory("ArgHeavyARShootyToken");
				A_PlaySound("weapons/heavy/fire", CHAN_5);
			} else {
				A_TakeInventory("ArgHeavyARShootyToken");
				A_PlaySound("weapons/heavy/fire", CHAN_6);
			}
		}
		"####" C 1 Bright A_WeaponOffset(1.0 + frandom(-0.25, 0.25), 33.0 + frandom(-0.25, 0.25));
		"####" D 1 Bright A_WeaponOffset(3.0 + frandom(-0.25, 0.25), 34.0 + frandom(-0.25, 0.25));
		"####" A 1        A_WeaponOffset(2.0 + frandom(-0.25, 0.25), 33.0 + frandom(-0.25, 0.25));
		"####" A 1        A_WeaponOffset(1.0 + frandom(-0.25, 0.25), 32.0 + frandom(-0.25, 0.25));
		"####" A 0 A_Refire();
		Goto Ready;
	Flash:
		TNT1 A 1 Bright A_Light2();
		TNT1 A 1 Bright A_Light1();
		Goto LightDone;
		
	/* Mod 1: Micro Missiles */
		
	Mod1Select:
		HA1G A 0;
		Goto SelectLoop;
	Mod1Raise:
		HA0G A 0;
		Goto ModSwapUp;
	Mod1Swap:
		HA1S A 1 A_PlaySound("weapons/heavy/mod1swap", CHAN_AUTO);
		HA1S BCD 1;
		HA1S E 2;
		HA1S F 8;
		HA1S GHIJK 1;
		HA1S K 7;
		HA1S LMN 2;
	Mod1Ready:
		HA1G A 0;
		Goto ReadyLoop;
	Mod1Up:
		HA1M A 1 {
			if(CountInv("Clip") < HEAVY_MOD1_AMMOUSE) { return ResolveState("Ready"); }
			A_PlaySound("weapons/heavy/mod1up", CHAN_AUTO);
			return ResolveState(null);
		}
		HA1M BCDE 1;
		HA1M G 0;
	Mod1Hold:
		"####" "#" 1 A_JumpIf(CallACS("SynthFire"), "Mod1Fire");
		"####" "#" 0 A_Refire();
	Mod1Down:
		HA1M E 1 A_PlaySound("weapons/heavy/mod1down", CHAN_AUTO);
		HA1M DCBA 1;
		Goto Cooldown;
	Mod1Fire:
		HA1N A 0 Bright {
			if(CountInv("Clip") < HEAVY_MOD1_AMMOUSE) { return ResolveState("Mod1Down"); }
			A_TakeInventory("Clip", HEAVY_MOD1_AMMOUSE, TIF_NOTAKEINFINITE);
			A_FireCustomMissile("ArgMicroMissile", 0, 0, 4, 4);
			A_AlertMonsters();
			
			if(CountInv("ArgHeavyARShootyToken") == 0) {
				A_GiveInventory("ArgHeavyARShootyToken");
				A_PlaySound("weapons/heavy/missile", CHAN_5);
			} else {
				A_TakeInventory("ArgHeavyARShootyToken");
				A_PlaySound("weapons/heavy/missile", CHAN_6);
			}
			
			// [XA] i really wonder if I can make this jump sequence suck less.
			if(CountInv("ArgHeavyARModCooldown") >= (HEAVY_MOD_COOLDOWN/6) * 5) { return ResolveState("Mod1Anim6"); }
			if(CountInv("ArgHeavyARModCooldown") >= (HEAVY_MOD_COOLDOWN/6) * 4) { return ResolveState("Mod1Anim5"); }
			if(CountInv("ArgHeavyARModCooldown") >= (HEAVY_MOD_COOLDOWN/6) * 3) { return ResolveState("Mod1Anim4"); }
			if(CountInv("ArgHeavyARModCooldown") >= (HEAVY_MOD_COOLDOWN/6) * 2) { return ResolveState("Mod1Anim3"); }
			if(CountInv("ArgHeavyARModCooldown") >= (HEAVY_MOD_COOLDOWN/6) * 1) { return ResolveState("Mod1Anim2"); }
			return ResolveState(null);
		}
	Mod1Anim1:
		HA1N A 1 Bright;
		HA1N B 1 Bright A_WeaponOffset(3.0 + frandom(-0.25, 0.25), 34.0 + frandom(-0.25, 0.25));
		HA1N C 1        A_WeaponOffset(2.0 + frandom(-0.25, 0.25), 33.0 + frandom(-0.25, 0.25));
		HA1N C 1        A_WeaponOffset(1.0 + frandom(-0.25, 0.25), 32.0 + frandom(-0.25, 0.25));
		HA1N C 1        A_WeaponOffset(1.0 + frandom(-0.25, 0.25), 32.0 + frandom(-0.25, 0.25));
		Goto Mod1AnimEnd;
	Mod1Anim2:
		HA1N D 1 Bright;
		HA1N E 1 Bright A_WeaponOffset(3.0 + frandom(-0.25, 0.25), 34.0 + frandom(-0.25, 0.25));
		HA1N F 1        A_WeaponOffset(2.0 + frandom(-0.25, 0.25), 33.0 + frandom(-0.25, 0.25));
		HA1N F 1        A_WeaponOffset(1.0 + frandom(-0.25, 0.25), 32.0 + frandom(-0.25, 0.25));
		HA1N F 1        A_WeaponOffset(1.0 + frandom(-0.25, 0.25), 32.0 + frandom(-0.25, 0.25));
		Goto Mod1AnimEnd;
	Mod1Anim3:
		HA1N G 1 Bright;
		HA1N H 1 Bright A_WeaponOffset(3.0 + frandom(-0.25, 0.25), 34.0 + frandom(-0.25, 0.25));
		HA1N I 1        A_WeaponOffset(2.0 + frandom(-0.25, 0.25), 33.0 + frandom(-0.25, 0.25));
		HA1N I 1        A_WeaponOffset(1.0 + frandom(-0.25, 0.25), 32.0 + frandom(-0.25, 0.25));
		HA1N I 1        A_WeaponOffset(1.0 + frandom(-0.25, 0.25), 32.0 + frandom(-0.25, 0.25));
		Goto Mod1AnimEnd;
	Mod1Anim4:
		HA1N J 1 Bright;
		HA1N K 1 Bright A_WeaponOffset(3.0 + frandom(-0.25, 0.25), 34.0 + frandom(-0.25, 0.25));
		HA1N L 1        A_WeaponOffset(2.0 + frandom(-0.25, 0.25), 33.0 + frandom(-0.25, 0.25));
		HA1N L 1        A_WeaponOffset(1.0 + frandom(-0.25, 0.25), 32.0 + frandom(-0.25, 0.25));
		HA1N L 1        A_WeaponOffset(1.0 + frandom(-0.25, 0.25), 32.0 + frandom(-0.25, 0.25));
		Goto Mod1AnimEnd;
	Mod1Anim5:
		HA1N M 1 Bright;
		HA1N N 1 Bright A_WeaponOffset(3.0 + frandom(-0.25, 0.25), 34.0 + frandom(-0.25, 0.25));
		HA1N O 1        A_WeaponOffset(2.0 + frandom(-0.25, 0.25), 33.0 + frandom(-0.25, 0.25));
		HA1N O 1        A_WeaponOffset(1.0 + frandom(-0.25, 0.25), 32.0 + frandom(-0.25, 0.25));
		HA1N O 1        A_WeaponOffset(1.0 + frandom(-0.25, 0.25), 32.0 + frandom(-0.25, 0.25));
		Goto Mod1AnimEnd;
	Mod1Anim6:
		HA1N P 1 Bright;
		HA1N Q 1 Bright A_WeaponOffset(3.0 + frandom(-0.25, 0.25), 34.0 + frandom(-0.25, 0.25));
		HA1M F 1        A_WeaponOffset(2.0 + frandom(-0.25, 0.25), 33.0 + frandom(-0.25, 0.25));
		HA1M F 1        A_WeaponOffset(1.0 + frandom(-0.25, 0.25), 32.0 + frandom(-0.25, 0.25));
		HA1M F 1        A_WeaponOffset(1.0 + frandom(-0.25, 0.25), 32.0 + frandom(-0.25, 0.25));
	Mod1AnimEnd:
		"####" "#" 0 {
			A_GiveInventory("ArgHeavyARModCooldown", (HEAVY_MOD_COOLDOWN/6));
			if(CountInv("ArgHeavyARModCooldown") <= (HEAVY_MOD_COOLDOWN/6)*5 && CountInv("Clip") >= HEAVY_MOD1_AMMOUSE) {
				return A_Refire();
			}
			return;
		}
		Goto Mod1Down;
		
	/* Mod 2: Tactical Scope */
	
	Mod2Select:
		HA2G A 0;
		Goto SelectLoop;
	Mod2Raise:
		HA0G A 0;
		Goto ModSwapUp;
	Mod2Swap:
		HA0G A 1 A_PlaySound("weapons/heavy/mod2swap", CHAN_AUTO);
		HA2S ABCD 1;
		HA2S E 2;
		HA2S F 9;
		HA2S G 2;
		HA2S H 11;
		HA2S HIJKLMN 1;
	Mod2Ready:
		HA2G A 0;
		Goto ReadyLoop;
	Mod2Up:
		HSCP A 1 Bright {
			if(CountInv("Clip") < HEAVY_MOD2_AMMOUSE) { return ResolveState("Ready"); }
			A_PlaySound("weapons/heavy/mod2up", CHAN_AUTO);
			A_ZoomFactor(2.0);
			A_SetCrosshair(HEAVY_CROSSHAIR_ANIM1);
			return ResolveState(null);
		}
		HSCP A 1 Bright A_SetCrosshair(HEAVY_CROSSHAIR_ANIM2);
		HSCP A 1 Bright A_SetCrosshair(HEAVY_CROSSHAIR_ANIM3);
		HSCP A 1 Bright A_SetCrosshair(HEAVY_CROSSHAIR_ANIM4);
		HSCP A 1 Bright A_SetCrosshair(HEAVY_CROSSHAIR_IDLE );
	Mod2Hold:
		HSCP A 1 Bright A_JumpIf(CallACS("SynthFire"), "Mod2Fire");
		HSCP A 0 Bright A_Refire();
	Mod2Down:
		HSCP A 1 {
			A_PlaySound("weapons/heavy/mod2down", CHAN_AUTO);
			A_ZoomFactor(1.0);
		}
		HSCP A 1 Bright A_SetCrosshair(HEAVY_CROSSHAIR_ANIM4);
		HSCP A 1 Bright A_SetCrosshair(HEAVY_CROSSHAIR_ANIM3);
		HSCP A 1 Bright A_SetCrosshair(HEAVY_CROSSHAIR_ANIM2);
		HSCP A 1 Bright A_SetCrosshair(HEAVY_CROSSHAIR_ANIM1);
		HSCP A 0 Bright A_SetCrosshair(0);
		Goto Ready;
	Mod2Fire:
		HSCP A 1 Bright {
			if(CountInv("Clip") < HEAVY_MOD2_AMMOUSE) { return ResolveState("Mod2Down"); }
			A_TakeInventory("Clip", HEAVY_MOD2_AMMOUSE, TIF_NOTAKEINFINITE);
			A_FireBullets(0, 0, 1, 14, "ArgBulletPuff");
			A_ZoomFactor(1.80);
			A_AlertMonsters();
			A_GunFlash();
			
			if(CountInv("ArgHeavyARShootyToken") == 0) {
				A_GiveInventory("ArgHeavyARShootyToken");
				A_PlaySound("weapons/heavy/altfire", CHAN_5);
			} else {
				A_TakeInventory("ArgHeavyARShootyToken");
				A_PlaySound("weapons/heavy/altfire", CHAN_6);
			}
			
			return ResolveState(null);
		}
		HSCP A 1 Bright A_ZoomFactor(1.85);
		HSCP A 1 Bright A_ZoomFactor(1.90);
		HSCP A 1 Bright A_ZoomFactor(1.95);
		HSCP A 3 Bright A_ZoomFactor(2.00);
		HA2G A 0 A_Refire();
		Goto Mod2Down;
	}
}

class ArgMicroMissile : Actor
{	
	int user_hitx;
	int user_hity;
	int user_hitz;

	Default
	{
		Radius 8;
		Height 16;
		Speed 30;
		Damage 0;
		Scale 0.33;
		Projectile;
		DamageType "ArgHeavyARMissile";
		Decal "PlasmaScorchLower";
	
		+CAUSEPAIN
		+BLOODSPLATTER
		+SEEKERMISSILE
		+EXTREMEDEATH
	}
	States
	{
	Spawn:
		HMIS A 1 Bright; // this is some crazy-arse code, but it's how El Zee did it in the ROTT TC, so...
		HMIS A 1 Bright { A_SpawnItemEx("ArgMicroMissileTrail",0,0,0,0,0,0,0,SXF_CLIENTSIDE); }
		HMIS A 1 Bright { A_SpawnItemEx("ArgMicroMissileTrail",0,0,0,0,0,0,0,SXF_CLIENTSIDE); }
		HMIS A 1 Bright { A_SpawnItemEx("ArgMicroMissileTrail",0,0,0,0,0,0,0,SXF_CLIENTSIDE); A_SeekerMissile( 5, 20, 0, 50, 5); A_ChangeVelocity (5.0, frandom(-2.5, 2.5), frandom(-1.0, 1.0), 1); }
		HMIS A 1 Bright { A_SpawnItemEx("ArgMicroMissileTrail",0,0,0,0,0,0,0,SXF_CLIENTSIDE); }
		HMIS A 1 Bright { A_SpawnItemEx("ArgMicroMissileTrail",0,0,0,0,0,0,0,SXF_CLIENTSIDE); }
		HMIS A 1 Bright { A_SpawnItemEx("ArgMicroMissileTrail",0,0,0,0,0,0,0,SXF_CLIENTSIDE); }
		HMIS A 1 Bright { A_SpawnItemEx("ArgMicroMissileTrail",0,0,0,0,0,0,0,SXF_CLIENTSIDE); A_SeekerMissile( 5, 20, 0, 50, 5); A_ChangeVelocity (5.0, frandom(-2.5, 2.5), frandom(-2.0, 2.0), 1); }
		HMIS A 1 Bright { A_SpawnItemEx("ArgMicroMissileTrail",0,0,0,0,0,0,0,SXF_CLIENTSIDE); }
		HMIS A 1 Bright { A_SpawnItemEx("ArgMicroMissileTrail",0,0,0,0,0,0,0,SXF_CLIENTSIDE); }
		HMIS A 1 Bright { A_SpawnItemEx("ArgMicroMissileTrail",0,0,0,0,0,0,0,SXF_CLIENTSIDE); }
		HMIS A 1 Bright { A_SpawnItemEx("ArgMicroMissileTrail",0,0,0,0,0,0,0,SXF_CLIENTSIDE); A_SeekerMissile( 5, 20, 0, 50, 5); A_ChangeVelocity (5.0, frandom(-2.5, 2.5), frandom(-2.5, 2.5), 1); }
	Flight:
		HMIS A 1 Bright { A_SpawnItemEx("ArgMicroMissileTrail",0,0,0,0,0,0,0,SXF_CLIENTSIDE); A_SeekerMissile( 5, 20, 0, 50, 5); A_ChangeVelocity (5.0, frandom(-2.5, 2.5), frandom(-2.5, 2.5), 1); }
		HMIS A 1 Bright { A_SpawnItemEx("ArgMicroMissileTrail",0,0,0,0,0,0,0,SXF_CLIENTSIDE); }
		HMIS A 1 Bright { A_SpawnItemEx("ArgMicroMissileTrail",0,0,0,0,0,0,0,SXF_CLIENTSIDE); }
		HMIS A 1 Bright { A_SpawnItemEx("ArgMicroMissileTrail",0,0,0,0,0,0,0,SXF_CLIENTSIDE); A_SeekerMissile(10, 20, 0, 50, 5); }
		HMIS A 1 Bright { A_SpawnItemEx("ArgMicroMissileTrail",0,0,0,0,0,0,0,SXF_CLIENTSIDE); }
		Loop;
	XDeath:
		HMIS A 0 Bright A_SeekerMissile(90, 90, SMF_LOOK, 256, 1);
		Goto Stick;
	Death:
		HMIS A 0 Bright {
			A_ClearTarget();
			A_SpawnItemEx("ArgBulletPuff");
		}
	Stick:
		HMIS A 0 Bright {
			user_hitx = CallACS("GetTracerX");
			user_hity = CallACS("GetTracerY");
			user_hitz = CallACS("GetTracerZ");
		}
		HMIS AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 Bright A_Warp(AAPTR_TRACER, user_hitx, user_hity, user_hitz, 0, WARPF_ABSOLUTEOFFSET|WARPF_USECALLERANGLE|WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
	Explode:
		REXP A 2 Bright {
			A_Stop();
			A_SetScale(0.5);
			A_SetTranslucent(0.75);
			A_Explode(50, 64);
			A_PlaySound("weapons/heavy/explode", CHAN_VOICE);
		}
		REXP B 2 Bright;
		REXP C 2 Bright A_SetTranslucent(0.7);
		REXP D 2 Bright A_SetTranslucent(0.6);
		REXP E 2 Bright A_SetTranslucent(0.5);
		REXP F 2 Bright A_SetTranslucent(0.4);
		Stop;
	}
}

class ArgMicroMissileTrail : ArgTrail
{
	Default
	{
		RenderStyle 'Add';
		Alpha 0.5;
		Scale 0.15;
	}
	States
	{
	Spawn:
		RTRL HHACEG 1 Bright;
		Stop;
	}
}
