// --------------------------------------------------------------------------
//
// ARGENT: ACS Lib of Spectacular Scriptage
//
// --------------------------------------------------------------------------

#library "argent"
#include "zcommon.acs"

/*
 * Monitor script. Handles stuff that has to be triggered in a script loop.
 * Only updates once a second since none of this requires real-time stuffs.
 */
script "ArgentMonitor" enter {

	// statbar switching
	if(GetCVAR("arg_classicHUD")) {
		GiveInventory("ArgClassicHudToken", 1);
	} else {
		TakeInventory("ArgClassicHudToken", 1);
	}
	
	// reeeeplaaay jeeenkiiiins
	Delay(35);
	Restart;
}

/*
 * Swaps the player's active weapon mod. This script just swaps the tokens;
 * the base ArgWeaponMod definition handles the state jumps and the initiation
 * of the swap animation.
 */
script "SwapMod" (void) {

	// Get the classes of the weapon tokens to figure out which
	// mod is selected (and whether or not each mod has actually
	// been picked up).
	str weapon = GetWeapon();
	str modSelectedToken = StrParam(s:weapon, s:"ModSelected");
	str mod1EnabledToken = StrParam(s:weapon, s:"Mod1Enabled");
	str mod2EnabledToken = StrParam(s:weapon, s:"Mod2Enabled");
	
	// determine which mod is actually selected
	int modSelected = CheckInventory(modSelectedToken);
	int mod1Enabled = CheckInventory(mod1EnabledToken);
	int mod2Enabled = CheckInventory(mod2EnabledToken);
	
	int modToSelect = 0;
	// swap to weapon 2 if 1 is selected; else switch to 1.
	// [XA] the lack of a ternary conditional is quite confounding.
	//      I need to switch to DH-ACC already. :P
	if(modSelected == 0) {
		if(mod1Enabled) {
			modToSelect = 1;
		} else if(mod2Enabled) {
			modToSelect = 2;
		}
	} else if(modSelected == 1) {
		if(mod2Enabled) {
			modToSelect = 2;
		}
	} else {
		if(mod1Enabled) {
			modToSelect = 1;
		}
	}
	
	// Do the mod swap, assuming we have a valid one to swap to.
	if(modToSelect > 0) {
		TakeInventory(modSelectedToken, 2);
		GiveInventory(modSelectedToken, modToSelect);
		SetResultValue(true);
	}
	else {
		SetResultValue(false);
	}
}

/*
 * Checks if the specified mod is currently selected. Used for state jumps.
 */
script "ModSelected" (int mod) {
	SetResultValue(CheckInventory(StrParam(s:GetWeapon(), s:"ModSelected")) == mod);
}

/*
 * Nefarious mod cheat script. For testing, surely.
 */
script "GimmeMods" (void) {
	str weapon = GetWeapon();
	str mod1EnabledToken = StrParam(s:weapon, s:"Mod1Enabled");
	str mod2EnabledToken = StrParam(s:weapon, s:"Mod2Enabled");
	GiveInventory(mod1EnabledToken, 1);
	GiveInventory(mod2EnabledToken, 1);
}

/*
 * Start mod cooldown phase. This is done in a script so there
 * aren't a zillion ACS_NamedExecutes done in a 1-tic loop constantly.
 */
script "StartModCooldown" (void) {
	str weapon = GetWeapon();
	str modCooldownToken = StrParam(s:weapon, s:"ModCooldown");
	while(CheckInventory(modCooldownToken) > 0) {
		TakeInventory(modCooldownToken, 1);
		delay(1);
	}
}

/*
 * Checks if mod cooldown is complete.
 */
script "CheckModCooldown" (void) {
	str weapon = GetWeapon();
	str modCooldownToken = StrParam(s:weapon, s:"ModCooldown");
	SetResultValue(CheckInventory(modCooldownToken) == 0);
}

/*
 * Clears a mod's cooldown entirely.
 */
script "ClearModCooldown" (void) {
	str weapon = GetWeapon();
	str modCooldownToken = StrParam(s:weapon, s:"ModCooldown");
	TakeInventory(modCooldownToken, 999);
}

/*
 * Simplified SynthFire: Primary
 */
script "SynthFire" (void)
{
	SetResultValue(GetPlayerInput(-1, INPUT_BUTTONS) & BT_ATTACK);
}

/*
 * Simplified SynthFire: Alternate
 */
script "SynthAltFire" (void)
{
	SetResultValue(GetPlayerInput(-1, INPUT_BUTTONS) & BT_ALTATTACK);
}

/*
 * GetTracer functions for sticky missiles
 */
script "GetTracerX" (void) {
	int projX = GetActorX(0);
	SetActivator(0, AAPTR_TRACER);
	int targX = GetActorX(0);
	SetResultValue(((projX - targX) * 3 / 4) >> 16);
}
script "GetTracerY" (void) {
	int projY = GetActorY(0);
	SetActivator(0, AAPTR_TRACER);
	int targY = GetActorY(0);
	SetResultValue(((projY - targY) * 3 / 4) >> 16);
}
script "GetTracerZ" (void) {
	int projZ = GetActorZ(0);
	SetActivator(0, AAPTR_TRACER);
	int targZ = GetActorZ(0);
	SetResultValue(((projZ - targZ) * 3 / 4) >> 16);
}
