// --------------------------------------------------------------------------
//
// ORANGE: The Other OTHER White Meat
//
// --------------------------------------------------------------------------

#library "orange"
#include "zcommon.acs"

#define MAXPLAYERS 8

global bool 1:Initialized;
global int 1:ArgentHealth[];
global int 2:ArgentArmor[];
global int 3:ArgentAmmo[];

/*
 * For the pistol, give it bars to indicate its' charge status.
 */
script "Orange_PistolChargeBar" enter
{
    int ChargeAmount;
    
    if(!CheckWeapon ("ArgPistol") || !CheckInventory ("ArgPistolCharge"))
    {
        Delay (1);
        Restart;
    }
    
    ChargeAmount = CheckInventory ("ArgPistolCharge") * 64 / 45;
    
    SetHudSize (640, 480, 1);
    SetHudClipRect (0, 0, 0, 0);
    SetFont ("PCHARGE");
	HudMessage (s:"A"; HUDMSG_PLAIN | HUDMSG_ALPHA, 250, CR_UNTRANSLATED, 320.0, 240.0, 0, 0.25);
    SetHudClipRect (288, 208 + (64 - ChargeAmount), 64, ChargeAmount);
    SetFont ("PCHARGE");
	HudMessage (s:"A"; HUDMSG_PLAIN | HUDMSG_ALPHA, 251, CR_UNTRANSLATED, 320.0, 240.0, 0, 0.5);
	
	Delay (1);
    
    HudMessage (s:""; HUDMSG_PLAIN, 250, CR_UNTRANSLATED, 0, 0, 0);
    HudMessage (s:""; HUDMSG_PLAIN, 251, CR_UNTRANSLATED, 0, 0, 0);
	Restart;
}

script "Orange_HUD" enter
{
    SetHudSize (640, 480, 1);
    int Player = PlayerNumber ();
    
    while (TRUE)
    {
        /* BFG Cells & Chainsaw Fuel */
        
        if (CheckInventory ("ArgChainsaw"))
        {
            SetFont ("RLITE");
            for (int ammo = 1; ammo <= 7; ammo++)
            {
                int Alpha = 0.25;
                if (CheckInventory ("ChainsawFuel") >= ammo) Alpha = 1.0;
                if (ammo > GetAmmoCapacity ("ChainsawFuel")) Alpha = 0.0;
                HudMessage (s:"A"; HUDMSG_PLAIN | HUDMSG_ALPHA, 200 + ammo, CR_UNTRANSLATED, 28.1 + (22.0 * (ammo - 1)), 401.0, 0.03, Alpha);
            }
        }
        
        if (CheckInventory ("ArgBFG9000"))
        {
            SetFont ("GLITE");
            for (int ammo = 1; ammo <= 7; ammo++)
            {
                int Alpha = 0.25;
                if (CheckInventory ("BFGCell") >= ammo) Alpha = 1.0;
                if (ammo > GetAmmoCapacity ("BFGCell")) Alpha = 0.0;
                HudMessage (s:"A"; HUDMSG_PLAIN | HUDMSG_ALPHA, 207 + ammo, CR_UNTRANSLATED, 28.1 + (22.0 * (ammo - 1)), 411.0, 0.03, Alpha);
            }
        }
        
        /* Argent Cell Stats */
        
        SetFont ("REDBASE");
        HudMessage (s:"A"; HUDMSG_PLAIN, 270, CR_UNTRANSLATED, 28.1, 360.0, 0);
        
        for (int bar = 1; bar <= 3; bar++)
        {
            str barlabel = "Health";
            if (bar == 2) barlabel = "Armor";
            if (bar == 3) barlabel = "Ammo";
            int upgrades = ArgentHealth[Player];
            if (bar == 2) upgrades = ArgentArmor[Player];
            if (bar == 3) upgrades = ArgentAmmo[Player];
            
            for (int i = 1; i <= 5; i++)
            {
                int Alpha = 1.0;
                SetFont ("SREDBAR1");
                if (i > upgrades) Alpha = 0.25;
                
                HudMessage (s:"A"; HUDMSG_PLAIN | HUDMSG_ALPHA, 252 + (6 * (bar - 1)) + i, CR_UNTRANSLATED, 32.1 + (8.0 * (i - 1)), 340.0 + (20.0 * (bar - 1)), 0, Alpha);
            }
            
            SetFont ("ArgFont");
            HudMessage (s:barlabel; HUDMSG_PLAIN, 252 + (6 * (bar - 1)), CR_ORANGE, 76.1, 340.0 + (20.0 * (bar - 1)), 0);
        }
        
        Delay (1);
    }
}

script "Orange_Initialize" open
{
    if (Initialized)
        terminate;
    
    for (int i = 0; i < MAXPLAYERS; i++)
    {
        ArgentHealth[i] = 1;
        ArgentArmor[i] = 1;
        ArgentAmmo[i] = 1;
    }
    
    Delay (1);
    Initialized = true;
}

script "Orange_ArgentCell" (void)
{
    SetHudSize (640, 480, 1);
    int Player = PlayerNumber ();
    
    ActivatorSound ("items/powerups/haste", 127);
    SetPlayerProperty (FALSE, TRUE, PROP_TOTALLYFROZEN);
    
    if (ArgentHealth[Player] >= 5 && ArgentArmor[Player] >= 5 && ArgentAmmo[Player] >= 5)
    {
        GiveInventory ("SphereMega", 1);
        SetPlayerProperty (FALSE, FALSE, PROP_TOTALLYFROZEN);
        ActivatorSound ("items/powerup", 127);
        
        FadeTo (128, 32, 0, 0.5, 0);
        FadeTo (128, 32, 0, 0, 1.0);
        terminate;
    }
    
    FadeTo (128, 32, 0, 0.5, 0.5);
    Delay (18);
    
    bool Chosen = FALSE;
    int Choice = 0;
    
    SetFont ("BigFont");
    HudMessage (s:"Collected Argent Energy\n\nSelect a system to upgrade"; HUDMSG_TYPEON, 220, CR_WHITE, 320.4, 160.0, 32767.0, 0.03, 0);
    
    while (!Chosen)
    {
        for (int bar = 1; bar <= 3; bar++)
        {
            str barlabel = "Health";
            if (bar == 2) barlabel = "Armor";
            if (bar == 3) barlabel = "Ammo";
            int upgrades = ArgentHealth[Player];
            if (bar == 2) upgrades = ArgentArmor[Player];
            if (bar == 3) upgrades = ArgentAmmo[Player];
            int barcolor = CR_RED;
            if (Choice + 1 == bar) barcolor = CR_GOLD;
            
            for (int i = 1; i <= 5; i++)
            {
                int Alpha = 1.0;
                SetFont ("REDBAR1");
                if (i > upgrades) Alpha = 0.33;
                if (Choice + 1 == bar && Timer() & 16 && i == upgrades + 1) Alpha = 1.0;
                
                HudMessage (s:"A"; HUDMSG_PLAIN | HUDMSG_ALPHA, 222 + (6 * (bar - 1)) + i, CR_UNTRANSLATED, 240.0 + (16.0 * (i - 1)), 320.0 + (40.0 * (bar - 1)), 0.03, Alpha);
            }
            
            SetFont ("BigFont");
            HudMessage (s:barlabel; HUDMSG_PLAIN, 222 + (6 * (bar - 1)), barcolor, 320.1, 320.0 + (40.0 * (bar - 1)), 0.03);
        }
        
        float forwardmove = GetPlayerInput (-1, INPUT_FORWARDMOVE);
        float forwardlast;
        
        if (forwardmove <= -6400 && forwardlast > -6400)
        {
            Choice++;
            if (Choice > 2) Choice = 0;
        }

        if (forwardmove >= 6400 && forwardlast < 6400)
        {
            Choice--;
            if (Choice < 0) Choice = 2;
        }
        
        if (GetPlayerInput (-1, INPUT_BUTTONS) & BT_USE)
        {
            if (Choice == 0 && ArgentHealth[Player] >= 5)
                ActivatorSound ("menu/error", 127);
            else if (Choice == 1 && ArgentArmor[Player] >= 5)
                ActivatorSound ("menu/error", 127);
            else if (Choice == 2 && ArgentAmmo[Player] >= 5)
                ActivatorSound ("menu/error", 127);
            else
                Chosen = TRUE;
        }

        Delay (1);
        
        forwardlast = forwardmove;
    }
    
    HudMessage (s:"Collected Argent Energy\n\nSelect a system to upgrade"; HUDMSG_FADEOUT, 220, CR_WHITE, 320.4, 160.0, 0.0, 1.0);
    switch (Choice)
    {
        case 0:
            ArgentHealth[Player]++;
            break;
        case 1:
            ArgentArmor[Player]++;
            break;
        case 2:
            ArgentAmmo[Player]++;
            break;
    }
    ActivatorSound ("items/powerup", 127);
    SetPlayerProperty (FALSE, FALSE, PROP_TOTALLYFROZEN);
    ACS_NamedExecuteWithResult ("Orange_SetArgentMaxes");
    
    FadeTo (128, 32, 0, 0, 1.0);
}

/*
 * Sets the maximum for health/armor/ammo on map start. It also gets re-run
 * when an Argent Cell is applied to reapply the new maxes.
 */
script "Orange_SetArgentMaxes" enter
{
    int Player = PlayerNumber ();
    
    while (!Initialized) Delay (1);
    
    /* Health Capacity */
    SetActorProperty (0, APROP_SpawnHealth, 75 + (25 * ArgentHealth[Player]));
    
    /* Ammo Capacity */
    SetAmmoCapacity ("Clip", 60 + (30 * ArgentAmmo[Player]));
    SetAmmoCapacity ("Shell", 10 + (10 * ArgentAmmo[Player]));
    SetAmmoCapacity ("RocketAmmo", 10 + (5 * ArgentAmmo[Player]));
    SetAmmoCapacity ("Cell", 100 + (50 * ArgentAmmo[Player]));
    
    SetAmmoCapacity ("BFGCell", 2 + ArgentAmmo[Player]);
    SetAmmoCapacity ("ChainsawFuel", 2 + ArgentAmmo[Player]);
}

script "Orange_GiveArmor" (int amount)
{
    int Player = PlayerNumber ();
    int ArmorMax = 25 + (25 * ArgentArmor[Player]);
    
    if (CheckInventory ("BasicArmor") >= ArmorMax)
    {
        SetResultValue (FALSE);
        Terminate;
    }
    
    if (amount + CheckInventory ("BasicArmor") > ArmorMax)
        amount = ArmorMax - CheckInventory ("BasicArmor");
    
    GiveInventory ("ArgArmor", amount);
    
    SetResultValue (TRUE);
}

script "Orange_TagMonster" (void)
{
    ACS_NamedExecuteWithResult ("Orange_TaggedMonster");
}

script "Orange_DropAmmoIfTagged" (void)
{
    str AmmoTypes[4] = {
        "ArgClip",
        "ArgShell",
        "ArgRocketAmmo",
        "ArgCell"
    };
    
    int Height = GetActorProperty (0, APROP_Height);
    int TID = UniqueTID ();
    
    if (CheckInventory ("ArgPistolTag"))
    {
        Spawn (AmmoTypes[Random (0, 3)], GetActorX (0), GetActorY (0), GetActorZ (0) + (Height / 2), TID);
        SetActorVelocity (TID, Random (-6.0, 6.0), Random (-6.0, 6.0), Random (0.0, 6.0), FALSE, FALSE);
    }
}

script "Orange_TaggedMonster" (void)
{
    SetActivator (0, AAPTR_MASTER);
    
    int Chance = 9;
    if (GetActorProperty (0, APROP_SpawnHealth) < 100) Chance = 4;
    
    if (Random (0, Chance) && !CheckInventory ("ArgPistolTag"))
        Terminate;
    
    if (!Random (0, 15) && !CheckFlag (0, "ALWAYSFAST"))
    {
        // BAD TOUCH!
        ActivatorSound ("items/powerup", 127);
        ActivatorSound ("items/powerups/berserk", 127);
        GiveInventory ("ArgMakeFaster", 1);
    }
    
    if (CheckInventory ("ArgPistolTag"))
    {
        GiveInventory ("ArgPistolTag", 35);
        Terminate;
    }
    
    GiveInventory ("PowerArgExecution", 1);
    GiveInventory ("ArgPistolTag", 175);
    if (CheckFlag (1, "BOSS")) TakeInventory ("ArgPistolTag", 70);
    
    while (CheckInventory ("ArgPistolTag"))
    {
        int Radius = GetActorProperty (0, APROP_Radius);
        int Height = GetActorProperty (0, APROP_Height);
        if (!CheckFlag (0, "ALWAYSFAST"))
        {
            if (!Random (0, 3)) SpawnParticle (0x0000FF, TRUE, 20, 4, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
            if (!Random (0, 3)) SpawnParticle (0x4040FF, TRUE, 20, 3, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
            if (!Random (0, 3)) SpawnParticle (0x8080FF, TRUE, 20, 3, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
            if (!Random (0, 3)) SpawnParticle (0xC0C0FF, TRUE, 20, 2, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
            if (!Random (0, 3)) SpawnParticle (0xFFFFFF, TRUE, 20, 2, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
        }
        else
        {
            if (!Random (0, 3)) SpawnParticle (0xFF0000, TRUE, 20, 4, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
            if (!Random (0, 3)) SpawnParticle (0xFF4040, TRUE, 20, 3, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
            if (!Random (0, 3)) SpawnParticle (0xFF8080, TRUE, 20, 3, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
            if (!Random (0, 3)) SpawnParticle (0xFFC0C0, TRUE, 20, 2, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
            if (!Random (0, 3)) SpawnParticle (0xFFFFFF, TRUE, 20, 2, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
        }
        
        if (!(ClassifyActor (0) & ACTOR_ALIVE))
        {
            if (!ACS_NamedExecuteWithResult ("Orange_CheckForPistolKill"))
            {
                int HealthDrops = Random (1, 3);
                if (ACS_NamedExecuteWithResult ("Orange_CheckForLudicrousHealth"))
                    HealthDrops *= 3;
                
                SetActorState (0, "XDeath");
                
                // DROOOOOPSSSS
                while (HealthDrops > 0)
                {
                    DropItem (0, "ArgHealthBonusDropped", -1, 256);
                    HealthDrops--;
                }
                
                if (GetCVar ("arg_tagweapons"))
                {
                    str drop = "";
                    if (CheckActorClass (0, "ArgZombieman") || CheckActorClass (0, "ArgNazi")) drop = "ArgClip";
                    if (CheckActorClass (0, "ArgShotgunGuy")) drop = "ArgShotgun";
                    if (CheckActorClass (0, "ArgChaingunGuy")) drop = "ArgHeavyAR";
                    DropItem (0, drop, -1, 256);
                }
                // Drop ammo (At least one) if we're low on ammo
                if (ACS_NamedExecuteWithResult ("Orange_CheckForLowAmmo", 0)) { DropItem (0, "ArgClipDropped", 10, 256); DropItem (0, "ArgClipDropped", 10, 85); DropItem (0, "ArgClipDropped", 10, 85); }
                if (ACS_NamedExecuteWithResult ("Orange_CheckForLowAmmo", 1)) { DropItem (0, "ArgShellDropped", 4, 256); DropItem (0, "ArgShellDropped", 4, 85); DropItem (0, "ArgShellDropped", 4, 85); }
                if (ACS_NamedExecuteWithResult ("Orange_CheckForLowAmmo", 2)) { DropItem (0, "ArgRocketAmmoDropped", 1, 256); DropItem (0, "ArgRocketAmmoDropped", 1, 85); DropItem (0, "ArgRocketAmmoDropped", 1, 85); }
                if (ACS_NamedExecuteWithResult ("Orange_CheckForLowAmmo", 3)) { DropItem (0, "ArgCellDropped", 20, 256); DropItem (0, "ArgCellDropped", 20, 85); DropItem (0, "ArgCellDropped", 20, 85); }
                
                // Occasionally drop a few random ammo pickups even if we haven't used the chainsaw
                DropItem (0, "ArgClipDropped", 10, 64);
                DropItem (0, "ArgShellDropped", 4, 64);
                DropItem (0, "ArgRocketAmmoDropped", 1, 64);
                DropItem (0, "ArgCellDropped", 20, 64);
                    
                if (ACS_NamedExecuteWithResult ("Orange_CheckForWeapon", 0)) DropItem (0, "ArgChainsawFuelDropped", 1, 16);
                if (ACS_NamedExecuteWithResult ("Orange_CheckForWeapon", 1)) DropItem (0, "ArgBFGCellDropped", 1, 16);
            }
            
            TakeInventory ("PowerArgExecution", 1);
            TakeInventory ("ArgPistolTag", 350);
            GiveInventory ("ArgMakeSlower", 1);
            Terminate;
        }
        
        Delay (1);
        TakeInventory ("ArgPistolTag", 1);
    }
    
    TakeInventory ("PowerArgExecution", 1);
    GiveInventory ("ArgMakeSlower", 1);
}

script "Orange_CheckForPistolKill" (void)
{
    SetActivator (0, AAPTR_TARGET);
    
    if (CheckWeapon ("ArgPistol"))
    {
        SetResultValue (TRUE);
        Terminate;
    }
    
    SetResultValue (FALSE);
}

script "Orange_CheckForWeapon" (int weapontype)
{
    SetActivator (0, AAPTR_TARGET);
    
    str weapon[2] = {
        "ArgChainsaw",
        "ArgBFG9000"
    };

    if (CheckInventory (weapon[weapontype]))
    {
        SetResultValue (TRUE);
        Terminate;
    }
    
    SetResultValue (FALSE);
}

script "Orange_CheckForLowAmmo" (int ammotype)
{
    SetActivator (0, AAPTR_TARGET);
    
    str ammo[4] = {
        "Clip",
        "Shell",
        "RocketAmmo",
        "Cell"
    };
    
    if (CheckInventory (ammo[ammotype]) < GetAmmoCapacity(ammo[ammotype]) / 4)
    {
        SetResultValue (TRUE);
        Terminate;
    }
    
    SetResultValue (FALSE);
}

script "Orange_CheckForLudicrousHealth" (void)
{
    SetActivator (0, AAPTR_TARGET);
    
    if (GetActorProperty (0, APROP_Health) <= 25)
    {
        SetResultValue (TRUE);
        Terminate;
    }
    
    SetResultValue (FALSE);
}

script "Orange_DropWeaponsAppropriately" (void)
{
    str drop = "";
    if (CheckActorClass (0, "ArgZombieman") || CheckActorClass (0, "ArgNazi")) drop = "ArgClip";
    if (CheckActorClass (0, "ArgShotgunGuy")) drop = "ArgShotgun";
    if (CheckActorClass (0, "ArgChaingunGuy")) drop = "ArgHeavyAR";
    
    if (!GetCVar ("arg_tagweapons"))
        DropItem (0, drop, -1, 256);
}

script "Orange_TemporaryItem" (void)
{
    int Radius = GetActorProperty (0, APROP_Radius);
    int Height = GetActorProperty (0, APROP_Height);
    
    int Counter = 35 * 7;
    while (Counter)
    {
        if (!Random (0, 15)) SpawnParticle (0xFFFF00, TRUE, 20, 4, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
        if (!Random (0, 15)) SpawnParticle (0xFFFF40, TRUE, 20, 3, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
        if (!Random (0, 15)) SpawnParticle (0xFFFF80, TRUE, 20, 3, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
        if (!Random (0, 15)) SpawnParticle (0xFFFFC0, TRUE, 20, 2, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
        if (!Random (0, 15)) SpawnParticle (0xFFFFFF, TRUE, 20, 2, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
        
        Delay (1);
        Counter--;
    }
    
    SetActorProperty (0, APROP_RenderStyle, STYLE_Add);
    SetActorProperty (0, APROP_Alpha, 0.5);
    
    Counter = 35 * 3;
    while (Counter)
    {
        if (!Random (0, 15)) SpawnParticle (0xFFFF00, TRUE, 20, 4, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
        if (!Random (0, 15)) SpawnParticle (0xFFFF40, TRUE, 20, 3, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
        if (!Random (0, 15)) SpawnParticle (0xFFFF80, TRUE, 20, 3, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
        if (!Random (0, 15)) SpawnParticle (0xFFFFC0, TRUE, 20, 2, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
        if (!Random (0, 15)) SpawnParticle (0xFFFFFF, TRUE, 20, 2, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
        
        Delay (1);
        Counter--;
    }
    
    Thing_Remove (0);
}
