// --------------------------------------------------------------------------
//
// ARGENT: ACS Lib of Spectacular Scriptage
//
// Exceptionally-important note: This now requires GDCC to build.
// It's pretty much better than acc.exe in every way, so get it! :P
//
// [XA] As a note, this script got a lot hackier when the Mod Kit item was
//      introduced, but the plan is to refactor this all in zscript anyway,
//      so I figured I'd let a few shenanigans slide for now. Be warned. :P
//
// --------------------------------------------------------------------------

#library "argent"
#include "zcommon.acs"

#define DEF_STUN_SECONDS 5
#define DEF_DUMMY_TID    -1
#define DEF_TID_START    1000

/*
 * Exceptionally-useful player struct thingamajig.
 */
struct ArgPlayer
{
	int rocketTid;
}
ArgPlayer players[64]; // zandro max to the max!

/*
 * Init script. Gotta set those defaults to something sane.
 */ 
script "ArgentInit" enter {
	ArgPlayer playerStruct = {
		DEF_DUMMY_TID // rocketTid
	};
	players[PlayerNumber()] = playerStruct;
}

/*
 * Checks to see if the player has obtained all mods.
 */
function bool CheckModsFull (void) {
	// [XA] welcome to brute-force-ville. I'll hopefully think of a nicer
	//      way to do this in zscript-land.
	return
		CheckInventory("ArgShotgunMod1Enabled"       )
	&&	CheckInventory("ArgShotgunMod2Enabled"       )
	&&	CheckInventory("ArgHeavyARMod1Enabled"       )
	&&	CheckInventory("ArgHeavyARMod2Enabled"       )
	&&	CheckInventory("ArgChaingunMod1Enabled"      )
	&&	CheckInventory("ArgChaingunMod2Enabled"      )
	&&	CheckInventory("ArgRocketLauncherMod1Enabled")
	&&	CheckInventory("ArgRocketLauncherMod2Enabled")
	&&	CheckInventory("ArgPlasmaRifleMod1Enabled"   )
	&&	CheckInventory("ArgPlasmaRifleMod2Enabled"   )
	&&	CheckInventory("ArgGaussCannonMod1Enabled"   )
	&&	CheckInventory("ArgGaussCannonMod2Enabled"   )
	;
}

/*
 * Fanciful drawing functions for UseModKit below.
 */
#define MSG_TIME 0.05
function void DrawModPanel (int id, int x, str tag, str desc, str icon, str key, bool got) {

	// fixed-point conversion eeee
	x = (x * 1.0);
	
	// we sure do need some instructions
	int col = CR_UNTRANSLATED;
	int alp = 1.0;
	str sel;
	if(got) {
		sel = "This mod is already installed.";
		col = CR_BLACK;
		alp = 0.33;
	} else if (StrCmp(key, "") > 0) {
		sel = StrParam(s:"'", k:key, s:"' to install");
	}

	// draw the bocks
	SetHudSize(640, 480, 1);
	SetFont("graphics/hud/mod-base.png");
	HudMessage(s:"A" ; HUDMSG_PLAIN, 1100 + id, CR_UNTRANSLATED, x +   0.1,   0.1, MSG_TIME);
	
	// draw uh eye-con
	SetFont(icon);
	HudMessage(s:"A" ; HUDMSG_ALPHA, 1000 + id, CR_UNTRANSLATED, x + 160.0, 180.0, MSG_TIME, alp);
	
	// draw some exceptionally text
	SetFont("ARGFONT");
	HudMessage(s:tag ; HUDMSG_PLAIN, 1010 + id, col            , x + 160.0,  30.1, MSG_TIME);
	HudMessage(s:desc; HUDMSG_PLAIN, 1020 + id, col            , x + 160.4, 320.1, MSG_TIME);
	HudMessage(s:sel ; HUDMSG_PLAIN, 1030 + id, CR_RED         , x + 160.0, 400.1, MSG_TIME);
}
function void DrawModFooter (str text1, str text2, int time) {
	time = (time == 0) ? MSG_TIME : time; // TIME IS FLEETING. WHAT SAY YOU?

	// footer borks
	SetHudSize(640, 480, 1);
	SetFont("graphics/hud/mod-footer.png");
	HudMessage(s:"A"  ; HUDMSG_PLAIN, 1042, CR_UNTRANSLATED, 320.0, 434.1, time);
	
	// australian rules footy text
	SetFont("ARGFONT");
	HudMessage(s:text1; HUDMSG_PLAIN, 1040, CR_UNTRANSLATED, 320.0, 440.1, time);
	HudMessage(s:text2; HUDMSG_PLAIN, 1041, CR_RED         , 320.0, 456.1, time);
}

/*
 * The Mod Kit! Shows a simple little menu thing that allows you to select
 * a mod to apply to your current gun. It's triggered when you use the mod
 * inventory item.
 */
script "UseModKit" (void) {
		
	// First, check if we already have all mods. If so, trade the kit for
	// a backpack and return.
	if (CheckModsFull()) {
		GiveInventory("Backpack", 1);
		TakeInventory("ArgModKit", 1);
		ActivatorSound("items/modkit/pickup", 255);
		DrawModFooter("All mods have already been purchased.", "Trading mod kit for a backpack full of ammo!.", 4.0);
	
	// Next, check to see if we are already in the menu before proceeding. 
	// This way you can Use the kit item to enter/exit the menu.
	// Hooray parallelism!
	} else if(CheckInventory("ArgModKitToken") == 0) {
	
		// Give a token to indicate that the "menu" is up.
		GiveInventory("ArgModKitToken", 1);
		ActivatorSound("items/modkit/use", 255);
	
		// Loop for a bit.
		int input;
		do {
			input = GetPlayerInput(-1, INPUT_BUTTONS);

			// Snag the correct tags and icon names from LANGUAGE.
			// [XA] This nuttiness will go away once ZScript-conversion happens.
			//      Also why I'm not bothering to make this more efficient yet. :P
			str weapon     = GetWeapon();
			str weaponBase = StrMid(weapon, 3, 999);
			str jankCheck  = StrParam(s:"ARG_MOD_TAG_" , s:weaponBase, s:"1");
			str modTag1    = StrParam(l:jankCheck);
			str modTag2    = StrParam(l:StrParam(s:"ARG_MOD_TAG_" , s:weaponBase, s:"2"));
			str modDesc1   = StrParam(l:StrParam(s:"ARG_MOD_DESC_", s:weaponBase, s:"1"));
			str modDesc2   = StrParam(l:StrParam(s:"ARG_MOD_DESC_", s:weaponBase, s:"2"));
			str modIcon1   = StrParam(l:StrParam(s:"ARG_MOD_ICON_", s:weaponBase, s:"1"));
			str modIcon2   = StrParam(l:StrParam(s:"ARG_MOD_ICON_", s:weaponBase, s:"2"));
			str mod1Token  = StrParam(s:weapon, s:"Mod1Enabled");
			str mod2Token  = StrParam(s:weapon, s:"Mod2Enabled");
		
			// If we ain't got no mods, short-circuit a bit.
			// [XA] janky check against the language entry, heh
			if(StrCmp(modTag1, jankCheck) == 0) {
		
				// Draw a "can't mod this" panel.
				DrawModPanel(1, 160, "No Mods Available", "No mods available for this weapon.", "graphics/hud/mod-pic-nope.png", "", false);
			
			} else {
	
				// Draw mod panels. The Hudmessage bit is abstracted slightly, for sanity.
				DrawModPanel(1,   0, modTag1, modDesc1, modIcon1, "+attack"   , CheckInventory(mod1Token));
				DrawModPanel(2, 320, modTag2, modDesc2, modIcon2, "+altattack", CheckInventory(mod2Token));
			}
		
			// Draw footer with instructions n' such.
			DrawModFooter("Switch weapons to browse mods.", StrParam(s:"Press '", k:"+use", s:"' to exit."), 0);
		
			// delays are important
			Delay(1);
		
			// Break if the player presses 'use' or the token item is removed.
		} while (!(input & BT_USE) && CheckInventory("ArgModKitToken") > 0);
	}
	
	// Take away the token in case the player aborted above.
	ActivatorSound("items/modkit/dismiss", 255);
	TakeInventory("ArgModKitToken", 1);
}

/*
 * 
 */
script "EquipModCheck" (int mod) {

	// Figure out if the desired mod has been enabled yet. If it is AND
	// the Mod Kit interface is open, enable the mod and initiate
	// a weapon swap. This is handled here rather than in the modkit script
	// itself to use fire/altfire as the controls. Funky, but works.
	str weapon = GetWeapon();
	str modSelectedToken = StrParam(s:weapon, s:"ModSelected");
	str modEnabledToken  = StrParam(s:weapon, s:"Mod", i:mod, s:"Enabled");
	
	if(CheckInventory("ArgModKitToken") > 0 && CheckInventory(modEnabledToken) == 0) {

		// dismiss the Mod Kit interface (and remove the kit, "consuming" it).
		TakeInventory("ArgModKitToken", 1);
		TakeInventory("ArgModKit", 1);
		ActivatorSound("items/modkit/apply", 255);
		
		// "gift" the mod and swap to it
		GiveInventory(modEnabledToken , 1);
		TakeInventory(modSelectedToken, 2);
		GiveInventory(modSelectedToken, mod);

		// make the calling weapon jump to the mod swap animation state.
		SetResultValue(true);

	} else {
		// don't do a thing otherwise. continue firing, gents!
		SetResultValue(false);
	}
}

/*
 * Swaps the player's active weapon mod. This script just swaps the tokens;
 * the base ArgWeaponMod definition handles the state jumps and the initiation
 * of the swap animation.
 */
script "SwapMod" (void) {

	// Get the classes of the weapon tokens to figure out which
	// mod is selected (and whether or not each mod has actually
	// been picked up).
	str weapon = GetWeapon();
	str modSelectedToken = StrParam(s:weapon, s:"ModSelected");
	str mod1EnabledToken = StrParam(s:weapon, s:"Mod1Enabled");
	str mod2EnabledToken = StrParam(s:weapon, s:"Mod2Enabled");
	
	// determine which mod is actually selected
	int modSelected = CheckInventory(modSelectedToken);
	int mod1Enabled = CheckInventory(mod1EnabledToken);
	int mod2Enabled = CheckInventory(mod2EnabledToken);
	
	int modToSelect = 0;
	// swap to weapon 2 if 1 is selected; else switch to 1.
	// [XA] the lack of a ternary conditional is quite confounding.
	//      I need to switch to DH-ACC already. :P
	if(modSelected == 0) {
		if(mod1Enabled) {
			modToSelect = 1;
		} else if(mod2Enabled) {
			modToSelect = 2;
		}
	} else if(modSelected == 1) {
		if(mod2Enabled) {
			modToSelect = 2;
		}
	} else {
		if(mod1Enabled) {
			modToSelect = 1;
		}
	}
	
	// Do the mod swap, assuming we have a valid one to swap to.
	if(modToSelect > 0) {
		TakeInventory(modSelectedToken, 2);
		GiveInventory(modSelectedToken, modToSelect);
		SetResultValue(true);
	}
	else {
		SetResultValue(false);
	}
}

/*
 * Checks if the specified mod is currently selected. Used for state jumps.
 */
script "ModSelected" (int mod) {
	SetResultValue(CheckInventory(StrParam(s:GetWeapon(), s:"ModSelected")) == mod);
}

/*
 * Nefarious mod cheat script. For testing, surely.
 */
script "GimmeMods" (void) {
	str weapon = GetWeapon();
	str mod1EnabledToken = StrParam(s:weapon, s:"Mod1Enabled");
	str mod2EnabledToken = StrParam(s:weapon, s:"Mod2Enabled");
	GiveInventory(mod1EnabledToken, 1);
	GiveInventory(mod2EnabledToken, 1);
}

/*
 * Start mod cooldown phase. This is done in a script so there
 * aren't a zillion ACS_NamedExecutes done in a 1-tic loop constantly.
 */
script "StartModCooldown" (void) {
	str weapon = GetWeapon();
	str modCooldownToken = StrParam(s:weapon, s:"ModCooldown");
	while(CheckInventory(modCooldownToken) > 0) {
		TakeInventory(modCooldownToken, 1);
		delay(1);
	}
}

/*
 * Checks if mod cooldown is complete.
 */
script "CheckModCooldown" (void) {
	str weapon = GetWeapon();
	str modCooldownToken = StrParam(s:weapon, s:"ModCooldown");
	SetResultValue(CheckInventory(modCooldownToken) == 0);
}

/*
 * Clears a mod's cooldown entirely.
 */
script "ClearModCooldown" (void) {
	str weapon = GetWeapon();
	str modCooldownToken = StrParam(s:weapon, s:"ModCooldown");
	TakeInventory(modCooldownToken, 999);
}

/*
 * Removes all cooldowns on map start.
 */
script "ClearCooldownsOnStart" enter {
	// [XA] bit stiff in the code here, but it works.
	TakeInventory("ArgShotgunModCooldown"       , 999);
	TakeInventory("ArgHeavyARModCooldown"       , 999);
	TakeInventory("ArgChaingunModCooldown"      , 999);
	TakeInventory("ArgRocketLauncherModCooldown", 999);
	TakeInventory("ArgPlasmaRifleModCooldown"   , 999);
	TakeInventory("ArgGaussCannonModCooldown"   , 999);
	TakeInventory("ArgGaussCannonModCharge"     , 999);
}

/*
 * Simplified SynthFire: Primary
 */
script "SynthFire" (void)
{
	SetResultValue(GetPlayerInput(-1, INPUT_BUTTONS) & BT_ATTACK);
}

/*
 * Simplified SynthFire: Alternate
 */
script "SynthAltFire" (void)
{
	SetResultValue(GetPlayerInput(-1, INPUT_BUTTONS) & BT_ALTATTACK);
}

/*
 * GetTracer functions for sticky missiles (cheers, love!)
 */
script "GetTracerX" (void) {
	int projX = GetActorX(0);
	SetActivator(0, AAPTR_TRACER);
	int targX = GetActorX(0);
	SetResultValue(((projX - targX) * 3 / 4) >> 16);
}
script "GetTracerY" (void) {
	int projY = GetActorY(0);
	SetActivator(0, AAPTR_TRACER);
	int targY = GetActorY(0);
	SetResultValue(((projY - targY) * 3 / 4) >> 16);
}
script "GetTracerZ" (void) {
	int projZ = GetActorZ(0);
	SetActivator(0, AAPTR_TRACER);
	int targZ = GetActorZ(0);
	SetResultValue(((projZ - targZ) * 3 / 4) >> 16);
}

/*
 * Extremely-useful utility function for saving the player's number in a uservar.
 */
script "GetPlayerNumber" (void) {
	SetActivatorToTarget(0);
	SetResultValue(PlayerNumber());
}

/*
 * RAWGGIT LAWNCHAIR scripts
 */
script "Mod1RocketFire" (int playerNum) {
	// remote detonator. Need to snag the rockets' TID so things may happen.
	int rocketTid = players[playerNum].rocketTid;
	
	// if the TID is the placeholder value (DEF_DUMMY_TID), assign a new one.
	// this will of course break if played with CIF3. Assuming literally anything
	// else in the mod is compatible with it at all... you crazy git. ;P
	if(rocketTid == DEF_DUMMY_TID) {
		rocketTid = UniqueTID(DEF_TID_START);
		players[playerNum].rocketTid = rocketTid;
	}
	
	// finally, don't forget to assign the TID to the rocket. :P
	Thing_ChangeTID(0, rocketTid);
}
script "Mod1RocketDetonate" (void) {
	// snag the TID, as before. Note that we actually user playerNum() here
	// since this script is called from the weapon rather than the projectile.
	int playerNum = PlayerNumber();
	int rocketTid = players[playerNum].rocketTid;
	
	// Nuke the sucker.
	SetActorState(rocketTid, "Detonate");
}
script "Mod1RocketExplode" (int playerNum) {
	// la la la TID la la
	int rocketTid = players[playerNum].rocketTid;
	
	// Wait a tic then check to see if there's anything else that has the TID.
	// Otherwise, clean it up so we can get a fresh one later.
	Delay(1);
	if(ThingCount(T_NONE, rocketTid) == 0) {
		players[playerNum].rocketTid = DEF_DUMMY_TID;
	}
}

/*
 * Plazma Stunz0rs
 */
script "NeuralStunner" (void) {
	// Get stun duration (in seconds) from the Stamina property.
	// If not set on this monster, use the default value.
	int stunSeconds = GetActorProperty(0, APROP_STAMINA);
	if( stunSeconds == 0 ) {
		stunSeconds = DEF_STUN_SECONDS;
	}
	int duration = stunSeconds * 35;
	int x, y, z, r;
	
	// loop for the duration and repeatedly set the pain state.
	// A custom "Pain.Stun" state is used; if this isn't defined,
	// the it falls back to the regular ol' Pain state.
	for(int i = 0; i < duration; i++) {

		// Don't SetActorState if the monster's dead,
		// or else Bad Things(tm) will happen.
		if(GetActorProperty(0, APROP_HEALTH) >= 1) {
			SetActorState(0, "Pain.Stun");
		} else {
			break;
		}
		
		// stunny zap effects, once per second.
		if(i % 35 == 0) {
			x = GetActorX(0);
			y = GetActorY(0);
			z = GetActorZ(0) + (GetActorProperty(0, APROP_HEIGHT) / 2);
			r = GetActorProperty(0, APROP_RADIUS);
			
			// spawn a different size actor depending on its radius.
			if(r <= 28.0) {
				Spawn("ArgStunEffect", x, y, z);
			} else if (r <= 56.0) {
				Spawn("ArgStunEffectLarge", x, y, z);
			} else {
				Spawn("ArgStunEffectHuge", x, y, z);
			}
		}
		
		Delay(1);
	}
}

/*
 * Silly Test Stuff
 */
script "FontTest" (void) {
	SetFont("ARGFONT");
	print(s:"The quick brown katefox jumps over the lazy xaserdog.\n");
}
