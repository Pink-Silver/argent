// --------------------------------------------------------------------------
//
// ORANGE: The Other OTHER White Meat
//
// --------------------------------------------------------------------------

#library "orange"
#include "zcommon.acs"

#define MAXPLAYERS 8

global bool 1:Initialized;
global int 1:ArgentHealth[];
global int 2:ArgentArmor[];
global int 3:ArgentAmmo[];

/*
 * For the pistol, give it bars to indicate its' charge status.
 */
script "Orange_PistolChargeBar" enter
{
    int ChargeAmount;
    
    if(!CheckWeapon ("ArgPistol") || !CheckInventory ("ArgPistolCharge"))
    {
        Delay (1);
        Restart;
    }
    
    ChargeAmount = CheckInventory ("ArgPistolCharge") * 64 / 45;
    
    SetHudSize (640, 480, 1);
    SetHudClipRect (0, 0, 0, 0);
    SetFont ("PCHARGE");
	HudMessage (s:"A"; HUDMSG_PLAIN | HUDMSG_ALPHA, 250, CR_UNTRANSLATED, 320.0, 240.0, 0, 0.25);
    SetHudClipRect (288, 208 + (64 - ChargeAmount), 64, ChargeAmount);
    SetFont ("PCHARGE");
	HudMessage (s:"A"; HUDMSG_PLAIN | HUDMSG_ALPHA, 251, CR_UNTRANSLATED, 320.0, 240.0, 0, 0.5);
	
	Delay (1);
    
    HudMessage (s:""; HUDMSG_PLAIN, 250, CR_UNTRANSLATED, 0, 0, 0);
    HudMessage (s:""; HUDMSG_PLAIN, 251, CR_UNTRANSLATED, 0, 0, 0);
	Restart;
}

script "Orange_HUD" enter
{
    SetHudSize (640, 480, 1);
    int Player = PlayerNumber ();
    
    while (TRUE)
    {
        for (int bar = 1; bar <= 3; bar++)
        {
            str barlabel = "Health";
            if (bar == 2) barlabel = "Armor";
            if (bar == 3) barlabel = "Ammo";
            int upgrades = ArgentHealth[Player];
            if (bar == 2) upgrades = ArgentArmor[Player];
            if (bar == 3) upgrades = ArgentAmmo[Player];
            
            for (int i = 1; i <= 5; i++)
            {
                SetFont ("SREDBAR1");
                if (i > upgrades) SetFont ("SREDBAR0");
                
                HudMessage (s:"A"; HUDMSG_PLAIN, 252 + (6 * (bar - 1)) + i, CR_UNTRANSLATED, 32.0 + (8.0 * (i - 1)), 400.0 + (20.0 * (bar - 1)), 0);
            }
            
            SetFont ("SmallFont");
            HudMessage (s:barlabel; HUDMSG_PLAIN, 252 + (6 * (bar - 1)), CR_RED, 72.1, 400.0 + (20.0 * (bar - 1)), 0);
        }
        
        Delay (1);
    }
}

script "Orange_Initialize" open
{
    if (Initialized)
        terminate;
    
    for (int i = 0; i < MAXPLAYERS; i++)
    {
        ArgentHealth[i] = 1;
        ArgentArmor[i] = 1;
        ArgentAmmo[i] = 1;
    }
    
    Delay (1);
    Initialized = true;
}

script "Orange_ArgentCell" (void)
{
    SetHudSize (640, 480, 1);
    int Player = PlayerNumber ();
    
    ActivatorSound ("items/powerups/haste", 127);
    SetPlayerProperty (FALSE, TRUE, PROP_TOTALLYFROZEN);
    
    if (ArgentHealth[Player] >= 5 && ArgentArmor[Player] >= 5 && ArgentAmmo[Player] >= 5)
    {
        GiveInventory ("SphereMega", 1);
        SetPlayerProperty (FALSE, FALSE, PROP_TOTALLYFROZEN);
        ActivatorSound ("items/powerup", 127);
        
        FadeTo (128, 32, 0, 0.5, 0);
        FadeTo (128, 32, 0, 0, 1.0);
        terminate;
    }
    
    FadeTo (128, 32, 0, 0.5, 0.5);
    Delay (18);
    
    bool Chosen = FALSE;
    int Choice = 0;
    
    SetFont ("BigFont");
    HudMessage (s:"Collected Argent Energy\n\nSelect a system to upgrade"; HUDMSG_TYPEON, 220, CR_ORANGE, 320.4, 160.0, 32767.0, 0.03, 0);
    
    while (!Chosen)
    {
        for (int bar = 1; bar <= 3; bar++)
        {
            str barlabel = "Health";
            if (bar == 2) barlabel = "Armor";
            if (bar == 3) barlabel = "Ammo";
            int upgrades = ArgentHealth[Player];
            if (bar == 2) upgrades = ArgentArmor[Player];
            if (bar == 3) upgrades = ArgentAmmo[Player];
            int barcolor = CR_RED;
            if (Choice + 1 == bar) barcolor = CR_GOLD;
            
            for (int i = 1; i <= 5; i++)
            {
                SetFont ("REDBAR1");
                if (i > upgrades) SetFont ("REDBAR0");
                if (Choice + 1 == bar && Timer() & 16 && i == upgrades + 1) SetFont ("REDBAR1");
                
                HudMessage (s:"A"; HUDMSG_PLAIN, 222 + (6 * (bar - 1)) + i, CR_UNTRANSLATED, 240.0 + (16.0 * (i - 1)), 320.0 + (40.0 * (bar - 1)), 0.03);
            }
            
            SetFont ("BigFont");
            HudMessage (s:barlabel; HUDMSG_PLAIN, 222 + (6 * (bar - 1)), barcolor, 320.1, 320.0 + (40.0 * (bar - 1)), 0.03);
        }
        
        float forwardmove = GetPlayerInput (-1, INPUT_FORWARDMOVE);
        float forwardlast;
        
        if (forwardmove <= -6400 && forwardlast > -6400)
        {
            Choice++;
            if (Choice > 2) Choice = 0;
        }

        if (forwardmove >= 6400 && forwardlast < 6400)
        {
            Choice--;
            if (Choice < 0) Choice = 2;
        }
        
        if (GetPlayerInput (-1, INPUT_BUTTONS) & BT_USE)
        {
            if (Choice == 0 && ArgentHealth[Player] >= 5)
                ActivatorSound ("menu/error", 127);
            else if (Choice == 1 && ArgentArmor[Player] >= 5)
                ActivatorSound ("menu/error", 127);
            else if (Choice == 2 && ArgentAmmo[Player] >= 5)
                ActivatorSound ("menu/error", 127);
            else
                Chosen = TRUE;
        }

        Delay (1);
        
        forwardlast = forwardmove;
    }
    
    HudMessage (s:"Collected Argent Energy\n\nSelect a system to upgrade"; HUDMSG_FADEOUT, 220, CR_ORANGE, 320.4, 160.0, 0.0, 1.0);
    switch (Choice)
    {
        case 0:
            ArgentHealth[Player]++;
            break;
        case 1:
            ArgentArmor[Player]++;
            break;
        case 2:
            ArgentAmmo[Player]++;
            break;
    }
    ActivatorSound ("items/powerup", 127);
    SetPlayerProperty (FALSE, FALSE, PROP_TOTALLYFROZEN);
    ACS_NamedExecuteWithResult ("Orange_SetArgentMaxes");
    
    FadeTo (128, 32, 0, 0, 1.0);
}

/*
 * Sets the maximum for health/armor/ammo on map start. It also gets re-run
 * when an Argent Cell is applied to reapply the new maxes.
 */
script "Orange_SetArgentMaxes" enter
{
    int Player = PlayerNumber ();
    
    while (!Initialized) Delay (1);
    
    /* Health Capacity */
    SetActorProperty (0, APROP_SpawnHealth, 75 + (25 * ArgentHealth[Player]));
    SetActorProperty (0, APROP_Health, 75 + (25 * ArgentHealth[Player]));
    
    /* Armor Capacity */
    // Shenanigans with: 25 + (25 * ArgentArmor[Player])
    
    /* Ammo Capacity */
    SetAmmoCapacity ("Clip", 60 + (30 * ArgentAmmo[Player]));
    SetAmmoCapacity ("Shell", 10 + (10 * ArgentAmmo[Player]));
    SetAmmoCapacity ("RocketAmmo", 10 + (5 * ArgentAmmo[Player]));
    SetAmmoCapacity ("Cell", 100 + (50 * ArgentAmmo[Player]));
    
    //SetAmmoCapacity ("BFGAmmo", 2 + ArgentAmmo[Player]);
    //SetAmmoCapacity ("ChainsawFuel", 2 + ArgentAmmo[Player]);
}

script "Orange_GiveArmor" (int amount)
{
    int Player = PlayerNumber ();
    int ArmorMax = 25 + (25 * ArgentArmor[Player]);
    
    if (CheckInventory ("BasicArmor") >= ArmorMax)
    {
        SetResultValue (FALSE);
        Terminate;
    }
    
    if (amount + CheckInventory ("BasicArmor") > ArmorMax)
        amount = ArmorMax - CheckInventory ("BasicArmor");
    
    GiveInventory ("ArgArmor", amount);
    
    SetResultValue (TRUE);
}

script "Orange_TagPlayerXPos" (void) { SetActivator (0, AAPTR_TARGET); SetResultValue (GetActorX (0)); }
script "Orange_TagPlayerYPos" (void) { SetActivator (0, AAPTR_TARGET); SetResultValue (GetActorY (0)); }
script "Orange_TagMonsterXPos" (void) { SetActivator (0, AAPTR_MASTER); SetResultValue (GetActorX (0)); }
script "Orange_TagMonsterYPos" (void) { SetActivator (0, AAPTR_MASTER); SetResultValue (GetActorY (0)); }

script "Orange_TagMonster" (void)
{
    int PlayerX = GetActorX (0);
    int PlayerY = GetActorY (0);
    if (!Random (0, 9) && VectorLength (ACS_NamedExecuteWithResult ("Orange_TagMonsterXPos") - ACS_NamedExecuteWithResult ("Orange_TagPlayerXPos"), ACS_NamedExecuteWithResult ("Orange_TagMonsterYPos") - ACS_NamedExecuteWithResult ("Orange_TagPlayerYPos")) <= 384.0) ACS_NamedExecuteWithResult ("Orange_TaggedMonster");
}

script "Orange_TaggedMonster" (void)
{
    SetActivator (0, AAPTR_MASTER);
    
    if (CheckInventory ("ArgPistolTag"))
    {
        GiveInventory ("ArgPistolTag", 70);
        Terminate;
    }
    
    GiveInventory ("ArgPistolTag", 175);
    if (CheckFlag (1, "BOSS")) TakeInventory ("ArgPistolTag", 70);
    
    while (CheckInventory ("ArgPistolTag"))
    {
        int Radius = GetActorProperty (0, APROP_Radius);
        int Height = GetActorProperty (0, APROP_Height);
        if (!Random (0, 3)) SpawnParticle (0x0000FF, TRUE, 20, 2, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
        if (!Random (0, 3)) SpawnParticle (0x4040FF, TRUE, 20, 2, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
        if (!Random (0, 3)) SpawnParticle (0x8080FF, TRUE, 20, 2, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
        if (!Random (0, 3)) SpawnParticle (0xC0C0FF, TRUE, 20, 2, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
        if (!Random (0, 3)) SpawnParticle (0xFFFFFF, TRUE, 20, 2, GetActorX (0) + Random (-Radius, Radius), GetActorY (0) + Random (-Radius, Radius), GetActorZ (0) + Random (0.0, Height), 0, 0, 0.7, 0, 0, 0, 255, 13);
        
        if (!(ClassifyActor (0) & ACTOR_ALIVE))
        {
            if (!ACS_NamedExecuteWithResult ("Orange_CheckForPistolKill"))
            {
                int HealthDrops = Random (1, 3);
                if (ACS_NamedExecuteWithResult ("Orange_CheckForLudicrousHealth"))
                    HealthDrops *= 3;
                
                TakeInventory ("ArgPistolTag", 350);
                SetActorState (0, "XDeath");
                
                // DROOOOOPSSSS
                while (HealthDrops > 0)
                {
                    DropItem (0, "ArgHealthBonusDropped", -1, 256);
                    HealthDrops--;
                }
                
                // Occasionally drop a few ammo pickups even if we haven't used the chainsaw
                if (!Random (0, 15)) DropItem (0, "ArgClip", -1, 256);
                if (!Random (0, 15)) DropItem (0, "ArgShell", -1, 256);
                if (!Random (0, 15)) DropItem (0, "ArgRocketAmmo", -1, 256);
                if (!Random (0, 15)) DropItem (0, "ArgCell", -1, 256);
            }
        }
        
        Delay (1);
        TakeInventory ("ArgPistolTag", 1);
    }
}

script "Orange_CheckForPistolKill" (void)
{
    SetActivator (0, AAPTR_TARGET);
    
    if (CheckWeapon ("ArgPistol"))
    {
        SetResultValue (TRUE);
        Terminate;
    }
    
    SetResultValue (FALSE);
}

script "Orange_CheckForLudicrousHealth" (void)
{
    SetActivator (0, AAPTR_TARGET);
    
    if (GetActorProperty (0, APROP_Health) <= 25)
    {
        SetResultValue (TRUE);
        Terminate;
    }
    
    SetResultValue (FALSE);
}
